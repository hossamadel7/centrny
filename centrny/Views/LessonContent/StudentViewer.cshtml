@{
    Layout = null;
    var lessonCode = ViewBag.PreFilledLessonCode as int?;
    var hasLesson = lessonCode.HasValue && lessonCode.Value > 0;
    string errorMessage = TempData["ErrorMessage"] as string;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Lesson Access</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #6366f1;
            --primary-purple: #8b5cf6;
            --primary-teal: #14b8a6;
            --success-green: #10b981;
            --warning-orange: #f59e0b;
            --danger-red: #ef4444;
            --gray-50: #f8fafc;
            --gray-100: #f1f5f9;
            --gray-200: #e2e8f0;
            --gray-300: #cbd5e1;
            --gray-400: #94a3b8;
            --gray-500: #64748b;
            --gray-600: #475569;
            --gray-700: #334155;
            --gray-800: #1e293b;
            --gray-900: #0f172a;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem 1rem;
            position: relative;
            overflow-x: hidden;
        }

            /* Animated background elements */
            body::before {
                content: '';
                position: absolute;
                top: -50%;
                left: -50%;
                width: 200%;
                height: 200%;
                background: radial-gradient(circle, rgba(255,255,255,0.1) 1px, transparent 1px);
                background-size: 50px 50px;
                animation: float 20s linear infinite;
                pointer-events: none;
            }

            body::after {
                content: '';
                position: absolute;
                top: 20%;
                right: 10%;
                width: 300px;
                height: 300px;
                background: radial-gradient(circle, rgba(139, 92, 246, 0.3), transparent 70%);
                border-radius: 50%;
                filter: blur(60px);
                animation: pulse 4s ease-in-out infinite alternate;
                pointer-events: none;
            }

        @@keyframes float {
            0%

        {
            transform: translate(-50%, -50%) rotate(0deg);
        }

        100% {
            transform: translate(-50%, -50%) rotate(360deg);
        }

        }

        @@keyframes pulse {
            0%

        {
            opacity: 0.4;
            transform: scale(1);
        }

        100% {
            opacity: 0.8;
            transform: scale(1.2);
        }

        }

        @@keyframes slideUp {
            from

        {
            opacity: 0;
            transform: translateY(30px) scale(0.95);
        }

        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }

        }

        @@keyframes shimmer {
            0%

        {
            background-position: -200% center;
        }

        100% {
            background-position: 200% center;
        }

        }

        @@keyframes iconBounce {
            0%, 100%

        {
            transform: translateY(0) rotate(0deg);
        }

        50% {
            transform: translateY(-8px) rotate(5deg);
        }

        }

        .container {
            width: 100%;
            max-width: 440px;
            position: relative;
            z-index: 10;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 24px;
            padding: 2.5rem 2rem 2rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(255, 255, 255, 0.05), inset 0 1px 0 0 rgba(255, 255, 255, 0.1);
            position: relative;
            animation: slideUp 0.6s cubic-bezier(0.16, 1, 0.3, 1);
            overflow: hidden;
        }

            .card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 1px;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.8), transparent);
            }

            .card::after {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
                animation: shimmer 3s infinite;
                pointer-events: none;
            }

        .back-link {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--gray-600);
            background: var(--gray-100);
            padding: 0.5rem 1rem;
            border-radius: 50px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            margin-bottom: 2rem;
            border: 1px solid var(--gray-200);
        }

            .back-link:hover {
                background: var(--gray-200);
                color: var(--gray-700);
                transform: translateX(-4px);
            }

        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .icon {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, var(--primary-blue) 0%, var(--primary-purple) 100%);
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
            box-shadow: 0 20px 40px -12px rgba(99, 102, 241, 0.4), 0 0 0 1px rgba(255, 255, 255, 0.1), inset 0 1px 0 0 rgba(255, 255, 255, 0.2);
            animation: iconBounce 3s ease-in-out infinite;
            position: relative;
        }

            .icon::before {
                content: '';
                position: absolute;
                inset: -2px;
                background: linear-gradient(135deg, var(--primary-blue), var(--primary-purple));
                border-radius: 22px;
                z-index: -1;
                filter: blur(8px);
                opacity: 0.6;
            }

            .icon i {
                font-size: 2rem;
                color: white;
                filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
            }

        .title {
            font-size: 2rem;
            font-weight: 700;
            background: linear-gradient(135deg, var(--gray-800) 0%, var(--gray-600) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
            letter-spacing: -0.025em;
        }

        .subtitle {
            color: var(--gray-600);
            font-size: 1rem;
            line-height: 1.5;
            margin-bottom: 0;
        }

        .divider {
            height: 1px;
            background: linear-gradient(90deg, transparent, var(--gray-200), transparent);
            margin: 2rem 0;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--gray-700);
            margin-bottom: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

            .label i {
                color: var(--primary-blue);
            }

        .input-wrapper {
            position: relative;
        }

        .pin-input {
            width: 100%;
            height: 64px;
            border: 2px solid var(--gray-200);
            border-radius: 16px;
            background: var(--gray-50);
            font-size: 1.5rem;
            font-weight: 600;
            text-align: center;
            letter-spacing: 8px;
            color: var(--gray-800);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            outline: none;
            font-family: 'Inter', monospace;
        }

            .pin-input::placeholder {
                color: var(--gray-400);
                letter-spacing: 4px;
            }

            .pin-input:hover {
                border-color: var(--gray-300);
                background: white;
            }

            .pin-input:focus {
                border-color: var(--primary-blue);
                background: white;
                box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.1), 0 10px 25px -5px rgba(99, 102, 241, 0.1);
                transform: translateY(-2px);
            }

        .hint {
            font-size: 0.75rem;
            color: var(--gray-500);
            text-align: center;
            margin-top: 0.5rem;
            font-weight: 500;
            letter-spacing: 0.5px;
        }

        .message {
            display: none;
            align-items: center;
            gap: 0.75rem;
            padding: 1rem;
            border-radius: 12px;
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 1.5rem;
            animation: slideUp 0.3s ease;
        }

            .message.show {
                display: flex;
            }

            .message.success {
                background: rgba(16, 185, 129, 0.1);
                color: #065f46;
                border: 1px solid rgba(16, 185, 129, 0.2);
            }

            .message.warning {
                background: rgba(245, 158, 11, 0.1);
                color: #92400e;
                border: 1px solid rgba(245, 158, 11, 0.2);
            }

            .message.danger {
                background: rgba(239, 68, 68, 0.1);
                color: #991b1b;
                border: 1px solid rgba(239, 68, 68, 0.2);
            }

        .error-alert {
            background: rgba(239, 68, 68, 0.1);
            color: #991b1b;
            border: 1px solid rgba(239, 68, 68, 0.2);
            padding: 1rem;
            border-radius: 12px;
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .no-lesson-warning {
            background: rgba(245, 158, 11, 0.1);
            color: #92400e;
            border: 1px solid rgba(245, 158, 11, 0.2);
            padding: 1.25rem;
            border-radius: 12px;
            font-size: 0.875rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .submit-btn {
            width: 100%;
            height: 56px;
            background: linear-gradient(135deg, var(--primary-blue) 0%, var(--primary-purple) 100%);
            border: none;
            border-radius: 16px;
            color: white;
            font-size: 1rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.75rem;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            box-shadow: 0 10px 20px -5px rgba(99, 102, 241, 0.3), 0 0 0 1px rgba(255, 255, 255, 0.05), inset 0 1px 0 0 rgba(255, 255, 255, 0.1);
        }

            .submit-btn::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
                transition: left 0.5s;
            }

            .submit-btn:hover:not(:disabled)::before {
                left: 100%;
            }

            .submit-btn:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 20px 40px -10px rgba(99, 102, 241, 0.4), 0 0 0 1px rgba(255, 255, 255, 0.05), inset 0 1px 0 0 rgba(255, 255, 255, 0.2);
            }

            .submit-btn:active {
                transform: translateY(-1px);
            }

            .submit-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

                .submit-btn:disabled::before {
                    display: none;
                }

        .footer {
            text-align: center;
            font-size: 0.75rem;
            color: var(--gray-500);
            margin-top: 1.5rem;
            font-weight: 500;
            letter-spacing: 0.5px;
        }

        .form-disabled {
            opacity: 0.6;
            pointer-events: none;
        }

        /* Loading overlay */
        .overlay {
            position: fixed;
            inset: 0;
            background: rgba(15, 23, 42, 0.5);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

            .overlay.active {
                display: flex;
            }

        .overlay-content {
            background: white;
            padding: 2rem;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            max-width: 320px;
            width: 90%;
        }

        .spinner {
            width: 48px;
            height: 48px;
            border: 4px solid var(--gray-200);
            border-top: 4px solid var(--primary-blue);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @@keyframes spin {
            to

        {
            transform: rotate(360deg);
        }

        }

        .overlay-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--gray-800);
            margin-bottom: 0.5rem;
        }

        .overlay-text {
            color: var(--gray-600);
            font-size: 0.875rem;
        }

        /* Mobile responsive */
        @@media (max-width: 640px) {
            body

        {
            padding: 1rem 0.5rem;
        }

        .card {
            padding: 2rem 1.5rem;
            border-radius: 20px;
        }

        .title {
            font-size: 1.75rem;
        }

        .icon {
            width: 70px;
            height: 70px;
        }

        .pin-input {
            height: 58px;
            font-size: 1.25rem;
            letter-spacing: 6px;
        }

        }

        /* Accessibility */
        @@media (prefers-reduced-motion: reduce) {
            *, *::before, *::after

        {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }

        }

        /* Dark mode support */
        @@media (prefers-color-scheme: dark) {
            .card

        {
            background: rgba(30, 41, 59, 0.95);
            border-color: rgba(255, 255, 255, 0.1);
        }

        .title {
            background: linear-gradient(135deg, white 0%, var(--gray-300) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .subtitle {
            color: var(--gray-400);
        }

        .label {
            color: var(--gray-300);
        }

        .pin-input {
            background: var(--gray-800);
            border-color: var(--gray-700);
            color: white;
        }

            .pin-input:hover {
                border-color: var(--gray-600);
                background: var(--gray-700);
            }

            .pin-input:focus {
                background: var(--gray-700);
            }

        .hint {
            color: var(--gray-400);
        }

        .footer {
            color: var(--gray-400);
        }

        .overlay-content {
            background: var(--gray-800);
        }

        .overlay-title {
            color: white;
        }

        .overlay-text {
            color: var(--gray-300);
        }

        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <a class="back-link" href="/OnlineStudent/Learning">
                <i class="fas fa-arrow-left"></i>
                <span>Back to Learning</span>
            </a>

            <div class="header">
                <div class="icon">
                    <i class="fas fa-key"></i>
                </div>
                <h1 class="title">Lesson Access</h1>
                @if (hasLesson)
                {
                    <p class="subtitle">Enter your secure PIN code to unlock and access this lesson.</p>
                }
                else
                {
                    <p class="subtitle">Please select a lesson from the Learning Center first.</p>
                }
            </div>

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="error-alert" role="alert">
                    <i class="fas fa-exclamation-triangle"></i>
                    @errorMessage
                </div>
            }

            @if (!hasLesson)
            {
                <div class="no-lesson-warning" role="alert">
                    <i class="fas fa-info-circle"></i>
                    <div>
                        <strong>No lesson selected.</strong><br />
                        Return to the Learning Center and choose a lesson to unlock with your PIN code.
                    </div>
                </div>
            }

            <div class="divider"></div>

            <form method="post"
                  action="/LessonContent/AccessLesson"
                  id="accessForm"
                  class="@(hasLesson ? "" : "form-disabled")"
                  autocomplete="off"
                  novalidate>

                <input type="hidden" name="lessonCode" id="lessonCodeHidden" value="@(hasLesson ? lessonCode.Value : 0)" />

                <div class="form-group">
                    <label class="label" for="pinCode">
                        <i class="fas fa-shield-alt"></i>
                        PIN Code
                    </label>
                    <div class="input-wrapper">
                        <input type="text"
                               id="pinCode"
                               name="pinCode"
                               class="pin-input"
                               maxlength="20"
                               inputmode="text"
                               autocapitalize="off"
                               autocomplete="off"
                               spellcheck="false"
                               placeholder="••••••••"
                               required />
                    </div>
                    <div class="hint">SECURE ACCESS CODE PROVIDED BY YOUR TEACHER</div>
                </div>

                <div class="message" id="statusMessage">
                    <i class="fas fa-info-circle"></i>
                    <span id="statusText"></span>
                </div>

                <button type="submit"
                        id="submitBtn"
                        class="submit-btn"
                        disabled
                        aria-disabled="true">
                    <i class="fas fa-unlock"></i>
                    <span id="submitBtnText">Unlock Lesson</span>
                </button>

                <div class="footer">
                    🔒 Access times and validity are monitored for security
                </div>
            </form>
        </div>
    </div>

    <div class="overlay" id="loadingOverlay" aria-hidden="true">
        <div class="overlay-content" role="alert" aria-live="polite">
            <div class="spinner"></div>
            <h3 class="overlay-title">Validating PIN...</h3>
            <p class="overlay-text">Please wait while we verify your access credentials</p>
        </div>
    </div>

    <script>
        (function () {
            const hasLesson = @(hasLesson.ToString().ToLower());
            const form = document.getElementById('accessForm');
            const pinInput = document.getElementById('pinCode');
            const submitBtn = document.getElementById('submitBtn');
            const submitBtnText = document.getElementById('submitBtnText');
            const lessonCodeHidden = document.getElementById('lessonCodeHidden');
            const loadingOverlay = document.getElementById('loadingOverlay');
            const statusMessage = document.getElementById('statusMessage');
            const statusText = document.getElementById('statusText');

            function showMessage(message, type = 'info', autoHide = 4000) {
                statusMessage.className = 'message show ' + type;
                statusText.textContent = message;

                if (autoHide > 0) {
                    setTimeout(() => {
                        statusMessage.classList.remove('show');
                    }, autoHide);
                }
            }

            function isValidPin(value) {
                return value && value.trim().length >= 4;
            }

            function setLoadingState(loading) {
                if (loading) {
                    loadingOverlay.classList.add('active');
                    loadingOverlay.setAttribute('aria-hidden', 'false');
                    submitBtn.disabled = true;
                    submitBtn.setAttribute('aria-disabled', 'true');
                    submitBtnText.textContent = 'Validating...';
                } else {
                    loadingOverlay.classList.remove('active');
                    loadingOverlay.setAttribute('aria-hidden', 'true');
                    submitBtnText.textContent = 'Unlock Lesson';
                }
            }

            // Initialize
            if (!hasLesson) {
                showMessage('No lesson selected. Please return to the Learning Center.', 'warning', 0);
                return;
            } else {
                showMessage('✨ Lesson ready! Enter your PIN code to continue.', 'success', 3000);
                pinInput.focus({ preventScroll: true });
            }

            // Real-time validation
            pinInput.addEventListener('input', function() {
                const isValid = isValidPin(pinInput.value);
                submitBtn.disabled = !isValid;
                submitBtn.setAttribute('aria-disabled', String(!isValid));

                // Visual feedback
                if (pinInput.value.length > 0) {
                    if (isValid) {
                        pinInput.style.borderColor = 'var(--success-green)';
                        pinInput.style.boxShadow = '0 0 0 4px rgba(16, 185, 129, 0.1)';
                    } else {
                        pinInput.style.borderColor = 'var(--warning-orange)';
                        pinInput.style.boxShadow = '0 0 0 4px rgba(245, 158, 11, 0.1)';
                    }
                } else {
                    pinInput.style.borderColor = 'var(--gray-200)';
                    pinInput.style.boxShadow = 'none';
                }
            });

            // Enter key support
            pinInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    if (isValidPin(pinInput.value)) {
                        form.dispatchEvent(new Event('submit'));
                    } else {
                        showMessage('❌ PIN must be at least 4 characters long', 'danger', 3000);
                        pinInput.focus();
                    }
                }
            });

            // Form submission
            form.addEventListener('submit', function(e) {
                if (!hasLesson) {
                    e.preventDefault();
                    return;
                }

                const pinValue = pinInput.value.trim();

                if (!isValidPin(pinValue)) {
                    e.preventDefault();
                    showMessage('❌ PIN must be at least 4 characters long', 'danger', 3000);
                    pinInput.focus();
                    return;
                }

                if (lessonCodeHidden.value === "0") {
                    e.preventDefault();
                    showMessage('❌ Lesson code missing. Please reselect from Learning Center.', 'danger', 5000);
                    return;
                }

                setLoadingState(true);
                console.log('[StudentViewer] Submitting PIN for lesson:', lessonCodeHidden.value);
            });

            // Paste handling
            pinInput.addEventListener('paste', function(e) {
                e.preventDefault();
                const pastedText = (e.clipboardData.getData('text') || '')
                    .replace(/\s+/g, '')
                    .slice(0, 20);

                pinInput.value = pastedText;
                pinInput.dispatchEvent(new Event('input'));

                if (pastedText) {
                    showMessage('📋 PIN pasted successfully', 'success', 2000);
                }
            });

            // Failsafe timeout
            setTimeout(() => {
                if (loadingOverlay.classList.contains('active')) {
                    setLoadingState(false);
                    showMessage('⏰ Taking longer than expected. Please try again.', 'warning', 6000);
                }
            }, 15000);

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                // ESC to cancel loading
                if (e.key === 'Escape' && loadingOverlay.classList.contains('active')) {
                    setLoadingState(false);
                }

                // Focus input with any alphanumeric key
                if (e.key.match(/^[a-z0-9]$/i) && document.activeElement !== pinInput) {
                    pinInput.focus();
                }
            });

        })();
    </script>
</body>
</html>