@{
    ViewData["Title"] = SharedLocalizer["Classes"];
    Layout = "_Layout";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />


<style>
    :root {
        --primary-gradient: linear-gradient(135deg, #6c5ce7 0%, #a29bfe 100%);
        --success-gradient: linear-gradient(135deg, #00b894 0%, #55a3ff 100%);
        --danger-gradient: linear-gradient(135deg, #e17055 0%, #fd79a8 100%);
        --warning-gradient: linear-gradient(135deg, #fdcb6e 0%, #f39c12 100%);
        --info-gradient: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        --primary-color: #6c5ce7;
        --success-color: #00b894;
        --danger-color: #e17055;
        --warning-color: #f39c12;
        --info-color: #74b9ff;
        --text-dark: #2d3436;
        --text-muted: #636e72;
        --bg-light: #f8f9fa;
        --bg-white: #ffffff;
        --border-color: #e9ecef;
        --shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        --shadow-lg: 0 8px 30px rgba(0, 0, 0, 0.12);
        --border-radius: 12px;
        --border-radius-lg: 16px;
        --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    * {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    body {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        color: var(--text-dark);
    }

    .daily-classes-page {
        min-height: 100vh;
        padding: 2rem 0;
    }

    .daily-container {
        background: var(--bg-white);
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-lg);
        padding: 2rem;
        margin: 0 auto;
        max-width: 1400px;
        border: 1px solid var(--border-color);
    }

    .page-header {
        text-align: center;
        margin-bottom: 2rem;
        padding: 2rem 0;
        background: linear-gradient(135deg, rgba(108, 92, 231, 0.1) 0%, rgba(162, 155, 254, 0.1) 100%);
        border-radius: var(--border-radius);
        border: 1px solid rgba(108, 92, 231, 0.1);
    }

        .page-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .page-header p {
            color: var(--text-muted);
            font-size: 1.1rem;
            margin: 0;
        }

    /* User Context Banner */
    .user-context-banner {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: var(--border-radius);
        margin-bottom: 1rem;
        text-align: center;
        box-shadow: var(--shadow);
    }

        .user-context-banner h6 {
            margin: 0;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .user-context-banner .badge {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            font-size: 0.85rem;
            padding: 0.4rem 0.8rem;
        }

        .user-context-banner small {
            opacity: 0.9;
            font-size: 0.9rem;
        }

    .center-banner {
        background: linear-gradient(135deg, #00b894 0%, #55a3ff 100%);
    }

    .teacher-banner {
        background: linear-gradient(135deg, #e17055 0%, #fd79a8 100%);
    }

    .error-banner {
        background: linear-gradient(135deg, #e17055 0%, #fd79a8 100%);
        color: white;
        padding: 1rem;
        border-radius: var(--border-radius);
        margin-bottom: 1rem;
        text-align: center;
        font-weight: 600;
        box-shadow: var(--shadow);
    }

    /* Weekly Generation Banner Styles */
    .weekly-generation-banner {
        background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
        color: white;
        padding: 1rem;
        border-radius: var(--border-radius);
        margin-bottom: 1rem;
        box-shadow: var(--shadow);
        border-left: 4px solid #d35400;
    }

        .weekly-generation-banner.success {
            background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
            border-left-color: #229954;
        }

        .weekly-generation-banner.info {
            background: linear-gradient(135deg, #3498db 0%, #5dade2 100%);
            border-left-color: #2980b9;
        }

        .weekly-generation-banner.warning {
            background: linear-gradient(135deg, #f39c12 0%, #f1c40f 100%);
            border-left-color: #d68910;
            color: #2c3e50;
        }

    .generation-info h6 {
        margin: 0;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .generation-info small {
        opacity: 0.9;
        font-size: 0.9rem;
    }

    .generation-actions .btn {
        font-size: 0.85rem;
        padding: 0.375rem 0.75rem;
    }

    /* Date Navigation */
    .date-navigation {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
        padding: 1rem;
        background: var(--bg-light);
        border-radius: var(--border-radius);
        border: 1px solid var(--border-color);
    }

    .date-nav-btn {
        background: var(--primary-gradient);
        border: none;
        color: white;
        padding: 0.75rem 1rem;
        border-radius: var(--border-radius);
        font-weight: 600;
        transition: var(--transition);
        box-shadow: var(--shadow);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .date-nav-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

    .current-date {
        background: var(--bg-white);
        padding: 1rem 2rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        text-align: center;
        border: 2px solid var(--primary-color);
    }

        .current-date h4 {
            margin: 0;
            color: var(--primary-color);
            font-weight: 700;
        }

        .current-date p {
            margin: 0;
            color: var(--text-muted);
            font-size: 0.9rem;
        }

    .date-picker-input {
        border: 2px solid var(--primary-color);
        border-radius: var(--border-radius);
        padding: 0.75rem 1rem;
        font-weight: 600;
        color: var(--primary-color);
        background: var(--bg-white);
        text-align: center;
    }

        .date-picker-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(108, 92, 231, 0.25);
        }

    /* Controls */
    .controls-section {
        display: flex;
        gap: 1rem;
        align-items: center;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
        justify-content: center;
    }

    .btn-modern {
        background: var(--primary-gradient);
        border: none;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: var(--border-radius);
        font-weight: 600;
        font-size: 0.9rem;
        transition: var(--transition);
        box-shadow: var(--shadow);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

        .btn-modern:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
            color: white;
        }

    .btn-success {
        background: var(--success-gradient);
    }

    .btn-info {
        background: var(--info-gradient);
    }

    .btn-warning {
        background: var(--warning-gradient);
        color: var(--text-dark);
    }

    /* Timeline Container */
    .timeline-container {
        background: var(--bg-white);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
        overflow: hidden;
        position: relative;
    }

    .timeline-header {
        background: var(--primary-gradient);
        color: white;
        padding: 1rem;
        text-align: center;
        font-weight: 700;
        font-size: 1.2rem;
        letter-spacing: 0.5px;
    }

    .timeline-grid {
        display: grid;
        grid-template-columns: 100px 1fr;
        min-height: 1500px; /* Extended height for 18 hours */
    }

    .time-column {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-right: 2px solid var(--border-color);
    }

    .time-slot {
        height: 80px;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        color: var(--text-muted);
        font-size: 0.85rem;
    }

        .time-slot:last-child {
            border-bottom: none;
        }

    .classes-column {
        position: relative;
        background: linear-gradient(135deg, #fafafa 0%, #ffffff 100%);
    }

    .class-slot {
        height: 80px;
        border-bottom: 1px solid var(--border-color);
        position: relative;
        padding: 0.25rem;
        display: flex;
        gap: 0.25rem;
        flex-wrap: wrap;
        align-content: flex-start;
    }

        .class-slot:last-child {
            border-bottom: none;
        }

    .class-item {
        background: #6c5ce7; /* Single color for all classes */
        color: white;
        padding: 0.5rem;
        border-radius: 6px;
        font-size: 0.85rem;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        transition: var(--transition);
        cursor: pointer;
        border-left: 4px solid rgba(255, 255, 255, 0.3);
        position: relative;
        overflow: hidden;
        flex: 1;
        min-width: 120px;
        max-width: 300px;
        margin-bottom: 0.25rem;
    }

        .class-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            background: #5a4fcf;
            z-index: 20;
        }

    .class-title {
        font-weight: 700;
        margin-bottom: 0.25rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .class-time {
        font-size: 0.75rem;
        opacity: 0.9;
        font-weight: 500;
    }

    .class-details {
        font-size: 0.7rem;
        opacity: 0.8;
        margin-top: 0.25rem;
    }

    .empty-slot {
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-muted);
        font-style: italic;
        height: 100%;
        min-height: 60px;
        opacity: 0.5;
    }

    .add-class-btn {
        position: absolute;
        top: 0.25rem;
        right: 0.25rem;
        width: 25px;
        height: 25px;
        background: var(--primary-color);
        border: none;
        border-radius: 50%;
        color: white;
        font-size: 0.7rem;
        opacity: 0.7;
        transition: var(--transition);
        cursor: pointer;
        z-index: 5;
    }

        .add-class-btn:hover {
            opacity: 1;
            transform: scale(1.1);
        }

    .empty-slot {
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-muted);
        font-style: italic;
        height: 100%;
        opacity: 0.5;
        position: absolute;
        width: 100%;
        top: 0;
        left: 0;
    }

    /* Floating Action Button */
    .floating-add-btn {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        width: 60px;
        height: 60px;
        background: var(--success-gradient);
        border: none;
        border-radius: 50%;
        color: white;
        font-size: 1.5rem;
        box-shadow: var(--shadow-lg);
        transition: var(--transition);
        z-index: 1000;
    }

        .floating-add-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 12px 40px rgba(0, 184, 148, 0.3);
        }

    /* Legend */
    .legend {
        display: flex;
        gap: 1.5rem;
        align-items: center;
        padding: 1rem 1.5rem;
        background: var(--bg-light);
        border-radius: var(--border-radius);
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
        border: 1px solid var(--border-color);
        justify-content: center;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
        color: var(--text-dark);
        font-size: 0.9rem;
    }

    .legend-color {
        width: 16px;
        height: 16px;
        border-radius: 4px;
        flex-shrink: 0;
    }

    /* Generation status cards */
    .generation-status-card {
        background: var(--bg-light);
        border-radius: var(--border-radius);
        padding: 1rem;
        margin-bottom: 1rem;
        border-left: 4px solid var(--primary-color);
    }

        .generation-status-card.success {
            border-left-color: var(--success-color);
            background: rgba(0, 184, 148, 0.1);
        }

        .generation-status-card.warning {
            border-left-color: var(--warning-color);
            background: rgba(243, 156, 18, 0.1);
        }

    .generation-summary {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
        margin: 1rem 0;
    }

    .summary-item {
        text-align: center;
        padding: 1rem;
        background: var(--bg-white);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
    }

    .summary-value {
        display: block;
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--primary-color);
    }

    .summary-label {
        display: block;
        font-size: 0.85rem;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-top: 0.25rem;
    }

    .day-breakdown {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 0.5rem;
        margin: 1rem 0;
    }

    .day-item {
        text-align: center;
        padding: 0.75rem 0.5rem;
        background: var(--bg-white);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        border-left: 3px solid var(--border-color);
    }

        .day-item.has-schedules {
            border-left-color: var(--info-color);
        }

        .day-item.has-classes {
            border-left-color: var(--success-color);
        }

        .day-item.needs-generation {
            border-left-color: var(--warning-color);
            background: rgba(243, 156, 18, 0.1);
        }

    .day-name {
        font-weight: 600;
        font-size: 0.8rem;
        text-transform: uppercase;
        color: var(--text-dark);
        margin-bottom: 0.25rem;
    }

    .day-counts {
        font-size: 0.75rem;
        color: var(--text-muted);
    }

    /* Modal Customizations */
    .modal-content {
        border-radius: var(--border-radius) !important;
        border: none !important;
        box-shadow: var(--shadow-lg) !important;
    }

    .modal-header {
        background: var(--primary-gradient) !important;
        color: white !important;
        border: none !important;
        border-radius: var(--border-radius) var(--border-radius) 0 0 !important;
    }

    .modal-title {
        font-weight: 600 !important;
    }

    .modal-body {
        padding: 2rem !important;
    }

    .form-control, .form-select {
        border: 2px solid var(--border-color) !important;
        border-radius: var(--border-radius) !important;
        padding: 0.75rem 1rem !important;
        transition: var(--transition) !important;
        font-weight: 500 !important;
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color) !important;
            box-shadow: 0 0 0 0.2rem rgba(108, 92, 231, 0.25) !important;
        }

    .form-label {
        font-weight: 600 !important;
        color: var(--text-dark) !important;
        margin-bottom: 0.5rem !important;
    }

    /* Loading State */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        border-radius: var(--border-radius);
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 3px solid var(--border-color);
        border-top: 3px solid var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    /* Toast Notifications */
    .toast-container {
        position: fixed;
        top: 2rem;
        right: 2rem;
        z-index: 1050;
    }

    .toast {
        border: none !important;
        border-radius: var(--border-radius) !important;
        box-shadow: var(--shadow-lg) !important;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .daily-container {
            margin: 1rem;
            padding: 1rem;
        }

        .page-header h1 {
            font-size: 2rem;
        }

        .date-navigation {
            flex-direction: column;
            gap: 0.5rem;
        }

        .controls-section {
            justify-content: center;
        }

        .legend {
            justify-content: center;
        }

        .floating-add-btn {
            bottom: 1rem;
            right: 1rem;
            width: 50px;
            height: 50px;
            font-size: 1.25rem;
        }

        .timeline-grid {
            grid-template-columns: 80px 1fr;
            min-height: 1200px; /* Adjusted for mobile */
        }

        .time-slot {
            font-size: 0.75rem;
            height: 60px; /* Slightly smaller on mobile */
        }

        .class-slot {
            height: 60px; /* Match time slot height */
            padding: 0.15rem;
        }

        .class-item {
            font-size: 0.75rem;
            padding: 0.3rem;
            min-width: 100px;
        }

        /* Responsive generation banner */
        .weekly-generation-banner .d-flex {
            flex-direction: column;
            gap: 1rem;
        }

        .generation-actions {
            justify-content: center;
        }

        .day-breakdown {
            grid-template-columns: repeat(2, 1fr);
            gap: 0.5rem;
        }

        .generation-summary {
            grid-template-columns: repeat(2, 1fr);
        }
    }
</style>

<div class="container-fluid daily-classes-page">
    <div class="daily-container">
        <!-- Page Header -->
        <div class="page-header">
            <h1><i class="fas fa-clock me-3"></i>Daily Classes</h1>
            <p>Manage your classes for each day - 6:00 AM to 12:00 AM</p>
        </div>

        <!-- User Context Banner or Error Message -->
        @if (ViewBag.Error != null)
        {
            <div class="error-banner">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>@ViewBag.Error</strong>
            </div>
        }
        else if (ViewBag.CurrentUserRootCode != null)
        {
            <div class="user-context-banner" style="background: linear-gradient(135deg, #6c5ce7 0%, #a29bfe 100%);">
                <h6>
                    <i class="fas fa-user-circle me-2"></i>
                    Daily classes for: <strong>@ViewBag.UserRootName</strong>
                    <span class="badge ms-2">
                        Root Code: @ViewBag.CurrentUserRootCode
                    </span>
                    @if (ViewBag.IsCenter == true)
                    {
                        <span class="badge bg-success ms-2">Center User</span>
                    }
                    else
                    {
                        <span class="badge bg-warning ms-2">Teacher User</span>
                    }
                </h6>
                <small>You can view and manage classes for your assigned organization only</small>
            </div>
        }

        @if (ViewBag.Error == null)
        {
            <!-- Weekly Class Generation Status Banner -->
            <div class="weekly-generation-banner" id="weeklyGenerationBanner" style="display: none;">
                <div class="d-flex justify-content-between align-items-center flex-wrap">
                    <div class="generation-info">
                        <h6 class="mb-1">
                            <i class="fas fa-calendar-week me-2"></i>
                            <span id="generationStatusText">Weekly Class Generation</span>
                        </h6>
                        <small id="generationStatusDetails">Checking status...</small>
                    </div>
                    <div class="generation-actions d-flex gap-2">
                        <button type="button" class="btn btn-success btn-sm" id="generateWeeklyBtn" style="display: none;" onclick="generateWeeklyClasses()">
                            <i class="fas fa-magic me-1"></i>Generate This Week
                        </button>
                        <button type="button" class="btn btn-outline-info btn-sm" id="viewStatusBtn" onclick="showWeeklyGenerationStatus()">
                            <i class="fas fa-info-circle me-1"></i>View Details
                        </button>
                    </div>
                </div>
            </div>

            <!-- Date Navigation -->
            <div class="date-navigation">
                <button type="button" class="date-nav-btn" id="prevDayBtn">
                    <i class="fas fa-chevron-left"></i> Previous Day
                </button>

                <div class="current-date" id="currentDateDisplay">
                    <h4 id="displayDate">@ViewBag.SelectedDate?.ToString("dddd, MMMM dd, yyyy")</h4>
                    <p id="displayDayOfWeek">@ViewBag.DayOfWeek</p>
                </div>

                <input type="date" class="date-picker-input" id="datePicker" value="@ViewBag.SelectedDateFormatted">

                <button type="button" class="date-nav-btn" id="nextDayBtn">
                    Next Day <i class="fas fa-chevron-right"></i>
                </button>
            </div>

            <!-- Legend -->
            <div class="legend">
                <div class="legend-item">
                    <div class="legend-color" style="background-color: #6c5ce7;"></div>
                    <span>Classes</span>
                </div>
                <div class="legend-item">
                    <i class="fas fa-calendar text-info me-2"></i>
                    <span>Schedule-based (Recurring)</span>
                </div>
                <div class="legend-item">
                    <i class="fas fa-calendar-day text-warning me-2"></i>
                    <span>Reservation-based (Specific date)</span>
                </div>
                <div class="legend-item">
                    <i class="fas fa-calendar-plus text-success me-2"></i>
                    <span>Direct classes (Added from daily view)</span>
                </div>
            </div>

            <!-- Controls -->
            <div class="controls-section">
                <button type="button" class="btn-modern btn-success" data-bs-toggle="modal" data-bs-target="#addClassModal">
                    <i class="fas fa-plus"></i> Add Class
                </button>
                <a href="@Url.Action("Index", "Schedule")" class="btn-modern btn-info">
                    <i class="fas fa-calendar-week"></i> Weekly Schedules
                </a>
                <button type="button" class="btn-modern" onclick="refreshClasses()">
                    <i class="fas fa-sync-alt"></i> @SharedLocalizer.Refresh
                </button>
                <button type="button" class="btn-modern" onclick="goToToday()">
                    <i class="fas fa-calendar-day"></i> @SharedLocalizer.Today
                </button>
                <!-- Weekly generation button -->
                <button type="button" class="btn-modern btn-warning" id="manualGenerateBtn" onclick="generateWeeklyClasses()" title="@SharedLocalizer.GenerateWeeklyClasses">
                    <i class="fas fa-calendar-plus"></i> @SharedLocalizer.GenerateWeeklyClasses
                </button>
            </div>

            <!-- Timeline Container -->
            <div class="timeline-container" style="position: relative;">
                <div class="loading-overlay" id="initialLoader">
                    <div class="spinner"></div>
                </div>

                <div class="timeline-header">
                    @SharedLocalizer.DailyTimeline
                    @if (ViewBag.UserRootName != null)
                    {
                        <small class="ms-3 opacity-75">(@ViewBag.UserRootName)</small>
                    }
                    <div class="mt-1">
                        <small id="timelineDate">@ViewBag.SelectedDate?.ToString("dddd, MMMM dd, yyyy")</small>
                    </div>
                </div>

                <div class="timeline-grid">
                    <!-- Time Column -->
                    <div class="time-column">
                        <div class="time-slot">6:00 AM</div>
                        <div class="time-slot">7:00 AM</div>
                        <div class="time-slot">8:00 AM</div>
                        <div class="time-slot">9:00 AM</div>
                        <div class="time-slot">10:00 AM</div>
                        <div class="time-slot">11:00 AM</div>
                        <div class="time-slot">12:00 PM</div>
                        <div class="time-slot">1:00 PM</div>
                        <div class="time-slot">2:00 PM</div>
                        <div class="time-slot">3:00 PM</div>
                        <div class="time-slot">4:00 PM</div>
                        <div class="time-slot">5:00 PM</div>
                        <div class="time-slot">6:00 PM</div>
                        <div class="time-slot">7:00 PM</div>
                        <div class="time-slot">8:00 PM</div>
                        <div class="time-slot">9:00 PM</div>
                        <div class="time-slot">10:00 PM</div>
                        <div class="time-slot">11:00 PM</div>
                        <div class="time-slot">12:00 AM</div>
                    </div>

                    <!-- Classes Column -->
                    <div class="classes-column" id="classesColumn">
                        <div class="class-slot" data-hour="6">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('06:00')" title="Add class at 6:00 AM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="7">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('07:00')" title="Add class at 7:00 AM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="8">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('08:00')" title="Add class at 8:00 AM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="9">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('09:00')" title="Add class at 9:00 AM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="10">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('10:00')" title="Add class at 10:00 AM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="11">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('11:00')" title="Add class at 11:00 AM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="12">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('12:00')" title="Add class at 12:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="13">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('13:00')" title="Add class at 1:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="14">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('14:00')" title="Add class at 2:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="15">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('15:00')" title="Add class at 3:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="16">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('16:00')" title="Add class at 4:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="17">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('17:00')" title="Add class at 5:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="18">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('18:00')" title="Add class at 6:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="19">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('19:00')" title="Add class at 7:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="20">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('20:00')" title="Add class at 8:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="21">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('21:00')" title="Add class at 9:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="22">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('22:00')" title="Add class at 10:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="23">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('23:00')" title="Add class at 11:00 PM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div class="class-slot" data-hour="0">
                            <div class="empty-slot">No classes</div>
                            <button class="add-class-btn" onclick="addClassAtTime('00:00')" title="Add class at 12:00 AM">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Weekly Generation Status Modal -->
            <div class="modal fade" id="weeklyGenerationModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="fas fa-calendar-week me-2"></i>Weekly Class Generation Status
                            </h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div id="weeklyGenerationContent">
                                <div class="text-center py-3">
                                    <div class="spinner"></div>
                                    <p class="mt-2">Loading generation status...</p>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-success" id="modalGenerateBtn" onclick="generateWeeklyClassesFromModal()">
                                <i class="fas fa-magic me-2"></i>Generate Classes
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (ViewBag.Error == null)
{
    <!-- Floating Add Button -->
    <button class="floating-add-btn" data-bs-toggle="modal" data-bs-target="#addClassModal" title="Add New Class">
        <i class="fas fa-plus"></i>
    </button>

    <!-- Add Class Modal -->
    <div class="modal fade" id="addClassModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-plus-circle me-2"></i>Add New Class
                        @if (ViewBag.UserRootName != null)
                        {
                            <small class="text-muted">for @ViewBag.UserRootName</small>
                        }
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="classForm">
                        <!-- User context info in form -->
                        @if (ViewBag.CurrentUserRootCode != null)
                        {
                            <div class="alert alert-info mb-3">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Note:</strong> This class will be created for <strong>@ViewBag.UserRootName</strong>
                                (Root Code: @ViewBag.CurrentUserRootCode)
                                @if (ViewBag.IsCenter == true)
                                {
                                    <span class="badge bg-success ms-2">Center User</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning ms-2">Teacher User</span>
                                }
                                on <strong id="formSelectedDate">@ViewBag.SelectedDate?.ToString("dddd, MMMM dd, yyyy")</strong>
                            </div>
                        }

                        <!-- Hidden fields -->
                        <input type="hidden" id="rootCode" value="@ViewBag.CurrentUserRootCode">
                        <input type="hidden" id="classDate" value="@ViewBag.SelectedDateFormatted">
                        <input type="hidden" id="isCenter" value="@ViewBag.IsCenter">

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Class Name *</label>
                                <input type="text" class="form-control" id="className" required placeholder="Enter class name">
                            </div>
                            
                            <!-- Teacher field - only for Center users -->
                            @if (ViewBag.IsCenter == true)
                            {
                                <div class="col-md-6 mb-3" id="teacherField">
                                    <label class="form-label">Teacher *</label>
                                    <select class="form-select" id="teacherCode" required>
                                        <option value="">Select Teacher</option>
                                    </select>
                                </div>
                            }
                            
                            <!-- Center field - only for Teacher users -->
                            @if (ViewBag.IsCenter != true)
                            {
                                <div class="col-md-6 mb-3" id="centerField">
                                    <label class="form-label">Center *</label>
                                    <select class="form-select" id="centerCode" required onchange="loadBranchesByCenter()">
                                        <option value="">Select Center</option>
                                    </select>
                                </div>
                            }
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Start Time *</label>
                                <input type="time" class="form-control" id="startTime" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">End Time *</label>
                                <input type="time" class="form-control" id="endTime" required>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Subject *</label>
                                <select class="form-select" id="subjectCode" required>
                                    <option value="">Select Subject</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Branch *</label>
                                <select class="form-select" id="branchCode" required>
                                    <option value="">Select Branch</option>
                                </select>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Hall *</label>
                                <select class="form-select" id="hallCode" required>
                                    <option value="">Select Hall</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Education Year *</label>
                                <select class="form-select" id="eduYearCode" required>
                                    <option value="">Select Education Year</option>
                                </select>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Year</label>
                                <select class="form-select" id="yearCode">
                                    <option value="">Select Year (Optional)</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Number of Students <small class="text-muted">(Auto-updated from attendance)</small></label>
                                <input type="text" class="form-control" id="noOfStudents" readonly style="background-color: #f8f9fa; cursor: not-allowed;" value="0">
                                <small class="form-text text-muted">This count increases automatically when students attend the class</small>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Total Amount</label>
                                <input type="number" class="form-control" id="totalAmount" step="0.01" min="0" placeholder="0.00">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Teacher Amount</label>
                                <input type="number" class="form-control" id="teacherAmount" step="0.01" min="0" placeholder="0.00">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Center Amount</label>
                                <input type="number" class="form-control" id="centerAmount" step="0.01" min="0" placeholder="0.00">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn-modern btn-success" id="saveClassBtn">
                        <i class="fas fa-save me-2"></i>Save Class
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Class Details Modal -->
    <div class="modal fade" id="classDetailsModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-info-circle me-2"></i>Class Details
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="classDetailsContent"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn-modern btn-info" id="editClassBtn">
                        <i class="fas fa-edit me-2"></i>Edit
                    </button>
                    <button type="button" class="btn-modern" style="background: var(--danger-gradient);" id="deleteClassBtn">
                        <i class="fas fa-trash me-2"></i>Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Toast Container -->
<div class="toast-container"></div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

<script>
    // OPTIMIZED JAVASCRIPT WITH CACHING AND PERFORMANCE IMPROVEMENTS
    
    let currentDate = new Date('@ViewBag.SelectedDateFormatted');
    let dailyClasses = [];
    let isEditMode = false;
    let editingClassId = null;
    let weeklyGenerationStatus = null;

    // OPTIMIZATION: Cache management
    let classesCache = new Map();
    let dropdownCache = null;
    let cacheTimeout = 5 * 60 * 1000; // 5 minutes

    // Store user context from server
    const userContext = {
        currentUserRootCode: @Json.Serialize(ViewBag.CurrentUserRootCode),
        userRootName: @Json.Serialize(ViewBag.UserRootName ?? ""),
        isCenter: @Json.Serialize(ViewBag.IsCenter ?? false),
        hasError: @Json.Serialize(ViewBag.Error != null)
    };

    console.log('User Context:', userContext);

    // OPTIMIZATION: Parallel loading instead of sequential
    document.addEventListener('DOMContentLoaded', function() {
        if (!userContext.hasError) {
            setupEventListeners();
            
            // Load critical data in parallel
            Promise.all([
                loadDailyClassesOptimized(),
                loadDropdownDataOptimized()
            ]).then(() => {
                hideInitialLoader();
                showWelcomeMessage();
                
                // Load non-critical features after main content
                setTimeout(() => {
                    checkWeeklyGenerationStatusOptimized();
                    conditionalAutoGenerate();
                }, 500);
            }).catch(error => {
                console.error('Error during initial load:', error);
                hideInitialLoader();
                showErrorToast('Error loading page data');
            });
        } else {
            hideInitialLoader();
        }
    });

    function setupEventListeners() {
        // Date navigation
        document.getElementById('prevDayBtn').addEventListener('click', () => navigateDate(-1));
        document.getElementById('nextDayBtn').addEventListener('click', () => navigateDate(1));
        document.getElementById('datePicker').addEventListener('change', onDatePickerChange);

        // Modal events
        document.getElementById('addClassModal').addEventListener('hidden.bs.modal', resetModalForCreate);
        document.getElementById('saveClassBtn').addEventListener('click', saveClass);
    }

    // OPTIMIZATION: Debounced navigation with caching
    function navigateDate(days) {
        currentDate.setDate(currentDate.getDate() + days);
        updateDateDisplay();
        
        // Debounce the class loading
        clearTimeout(window.navigationTimeout);
        window.navigationTimeout = setTimeout(() => {
            loadDailyClassesOptimized();
        }, 150);
    }

    function onDatePickerChange() {
        const selectedDate = document.getElementById('datePicker').value;
        currentDate = new Date(selectedDate + 'T00:00:00');
        updateDateDisplay();
        loadDailyClassesOptimized();
    }

    function goToToday() {
        currentDate = new Date();
        updateDateDisplay();
        loadDailyClassesOptimized();
    }

    function updateDateDisplay() {
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        const formattedDate = currentDate.toLocaleDateString('en-US', options);
        const dayOfWeek = currentDate.toLocaleDateString('en-US', { weekday: 'long' });
        const isoDate = currentDate.toISOString().split('T')[0];

        document.getElementById('displayDate').textContent = formattedDate;
        document.getElementById('displayDayOfWeek').textContent = dayOfWeek;
        document.getElementById('datePicker').value = isoDate;
        document.getElementById('timelineDate').textContent = formattedDate;

        // Update form date info
        const formDateElement = document.getElementById('formSelectedDate');
        if (formDateElement) {
            formDateElement.textContent = formattedDate;
        }

        const classDateInput = document.getElementById('classDate');
        if (classDateInput) {
            classDateInput.value = isoDate;
        }
    }

    // OPTIMIZATION: Cached loading with timeout
    async function loadDailyClassesOptimized() {
        if (userContext.hasError) {
            console.log('User has no root assignment - skipping classes load');
            return;
        }

        const dateStr = currentDate.toISOString().split('T')[0];
        const cacheKey = `classes_${dateStr}_${userContext.currentUserRootCode}`;
        
        // Check cache first
        const cached = classesCache.get(cacheKey);
        if (cached && (Date.now() - cached.timestamp) < cacheTimeout) {
            console.log('Using cached classes data');
            dailyClasses = cached.data;
            renderDailyTimelineOptimized();
            return;
        }

        showLoadingOverlay();

        try {
            const response = await fetch(`/DailyClass/GetDailyClasses?date=${dateStr}`, {
                signal: AbortSignal.timeout(10000) // 10 second timeout
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            dailyClasses = Array.isArray(data) ? data : [];
            
            // Cache the result
            classesCache.set(cacheKey, {
                data: dailyClasses,
                timestamp: Date.now()
            });
            
            // Clean old cache entries
            cleanCache();
            
            console.log(`Loaded ${dailyClasses.length} classes for date ${dateStr}`);
            renderDailyTimelineOptimized();

        } catch (error) {
            console.error('Error fetching daily classes:', error);
            showErrorToast('Failed to load classes: ' + error.message);
        } finally {
            hideLoadingOverlay();
        }
    }

    // OPTIMIZATION: Async dropdown loading with caching
    async function loadDropdownDataOptimized() {
        if (dropdownCache && (Date.now() - dropdownCache.timestamp) < cacheTimeout) {
            console.log('Using cached dropdown data');
            populateDropdownsFromCache(dropdownCache.data);
            return;
        }

        try {
            const response = await fetch('/DailyClass/GetDropdownData');
            if (!response.ok) throw new Error('Failed to load dropdown data');
            
            const data = await response.json();
            
            if (data.error) {
                console.warn('Dropdown data error:', data.error);
                return;
            }

            // Cache the data
            dropdownCache = {
                data: data,
                timestamp: Date.now()
            };

            populateDropdownsFromCache(data);
            
        } catch (error) {
            console.error('Error loading dropdown data:', error);
        }
    }

    function populateDropdownsFromCache(data) {
        // Populate dropdowns efficiently using document fragments
        populateSelectAsync('subjectCode', data.subjects);
        populateSelectAsync('yearCode', data.years);
        populateSelectAsync('hallCode', data.halls);
        populateSelectAsync('eduYearCode', data.eduYears);
        
        if (userContext.isCenter) {
            populateSelectAsync('teacherCode', data.teachers);
            populateSelectAsync('branchCode', data.branches);
        } else {
            populateSelectAsync('centerCode', data.centers);
            populateSelectAsync('branchCode', data.branches);
        }
    }

    function populateSelectAsync(selectId, options) {
        const select = document.getElementById(selectId);
        if (!select || !options) return;
        
        // Clear existing options except first
        select.innerHTML = '<option value="">Select...</option>';
        
        // Add options efficiently using document fragment
        const fragment = document.createDocumentFragment();
        options.forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.text;
            fragment.appendChild(optionElement);
        });
        
        select.appendChild(fragment);
    }

    // OPTIMIZATION: Efficient rendering with document fragments
    function renderDailyTimelineOptimized() {
        // Group classes by hour efficiently
        const classesByHour = dailyClasses.reduce((acc, cls) => {
            const startHour = parseInt(cls.startTime.split(':')[0]);
            if ((startHour >= 6 && startHour <= 23) || startHour === 0) {
                if (!acc[startHour]) acc[startHour] = [];
                acc[startHour].push(cls);
            }
            return acc;
        }, {});

        // Batch DOM updates
        const classSlots = document.querySelectorAll('.class-slot');
        const updates = [];

        classSlots.forEach(slot => {
            const hour = parseInt(slot.dataset.hour);
            const classes = classesByHour[hour] || [];
            
            updates.push({
                slot,
                hour,
                classes,
                html: generateSlotHTML(hour, classes)
            });
        });

        // Apply all updates at once using requestAnimationFrame
        requestAnimationFrame(() => {
            updates.forEach(update => {
                update.slot.innerHTML = update.html;
            });
        });
    }

    function generateSlotHTML(hour, classes) {
        const hourDisplay = hour === 0 ? '12:00 AM' :
                           hour < 12 ? `${hour}:00 AM` :
                           hour === 12 ? '12:00 PM' :
                           `${hour - 12}:00 PM`;

        if (classes.length === 0) {
            return `
                <div class="empty-slot">No classes</div>
                <button class="add-class-btn" onclick="addClassAtTime('${hour.toString().padStart(2, '0')}:00')" title="Add class at ${hourDisplay}">
                    <i class="fas fa-plus"></i>
                </button>
            `;
        }

        const classesHtml = classes.map(cls => {
            let displayInfo = '';
            if (userContext.isCenter) {
                displayInfo = cls.teacherName || '';
            } else {
                const centerPart = cls.centerName || '';
                const branchPart = cls.branchName || '';
                displayInfo = [centerPart, branchPart].filter(part => part).join(' • ');
            }

            return `
                <div class="class-item" onclick="showClassDetails(${cls.classCode})" data-class-id="${cls.classCode}">
                    <div class="class-title">
                        <i class="fas fa-chalkboard-teacher"></i>
                        ${cls.title}
                    </div>
                    <div class="class-time">${cls.startTime12} - ${cls.endTime12}</div>
                    ${displayInfo ? `<div class="class-details">${displayInfo}</div>` : ''}
                    ${cls.subjectName ? `<div class="class-details" style="opacity: 0.8;">${cls.subjectName}</div>` : ''}
                </div>
            `;
        }).join('');

        return `
            ${classesHtml}
            <button class="add-class-btn" onclick="addClassAtTime('${hour.toString().padStart(2, '0')}:00')" title="Add class at ${hourDisplay}">
                <i class="fas fa-plus"></i>
            </button>
        `;
    }

    // ==================== WEEKLY GENERATION FUNCTIONS (OPTIMIZED) ====================

    // OPTIMIZATION: Conditional auto-generation (not on every page load)
    async function conditionalAutoGenerate() {
        // Only check on Saturdays or if explicitly needed
        const today = new Date();
        const isSaturday = today.getDay() === 6;
        
        if (isSaturday || shouldCheckGeneration()) {
            await autoGenerateIfNeeded();
        }
    }

    function shouldCheckGeneration() {
        // Check if last generation check was more than 24 hours ago
        try {
            const lastCheck = localStorage.getItem('lastGenerationCheck');
            if (!lastCheck) return true;
            
            const daysSinceCheck = (Date.now() - parseInt(lastCheck)) / (1000 * 60 * 60 * 24);
            return daysSinceCheck >= 1;
        } catch (e) {
            return true; // If localStorage fails, check anyway
        }
    }

    async function autoGenerateIfNeeded() {
        try {
            const response = await fetch('/DailyClass/CheckAndGenerateWeeklyClasses', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) throw new Error('Failed to check auto-generation');

            const result = await response.json();

            if (result.success && result.autoGenerated) {
                showSuccessToast(result.message);
                // Refresh the current view
                loadDailyClassesOptimized();
                checkWeeklyGenerationStatusOptimized();
            }

            // Update last check time
            try {
                localStorage.setItem('lastGenerationCheck', Date.now().toString());
            } catch (e) {
                // localStorage might be disabled
                console.warn('Could not save to localStorage');
            }
        } catch (error) {
            console.error('Error in auto-generation check:', error);
        }
    }

    // OPTIMIZATION: Debounced status check
    let statusCheckTimeout;
    async function checkWeeklyGenerationStatusOptimized() {
        clearTimeout(statusCheckTimeout);
        
        statusCheckTimeout = setTimeout(async () => {
            try {
                const response = await fetch('/DailyClass/GetWeeklyGenerationStatus');
                if (!response.ok) throw new Error('Failed to get status');

                weeklyGenerationStatus = await response.json();
                updateWeeklyGenerationBanner();
            } catch (error) {
                console.error('Error checking weekly generation status:', error);
            }
        }, 300);
    }

    function updateWeeklyGenerationBanner() {
        const banner = document.getElementById('weeklyGenerationBanner');
        const statusText = document.getElementById('generationStatusText');
        const statusDetails = document.getElementById('generationStatusDetails');
        const generateBtn = document.getElementById('generateWeeklyBtn');

        if (!weeklyGenerationStatus || weeklyGenerationStatus.error) {
            banner.style.display = 'none';
            return;
        }

        const { activeSchedulesCount, existingClassesCount, needsGeneration, canGenerate, weekStartFormatted, weekEndFormatted } = weeklyGenerationStatus;

        banner.style.display = 'block';
        banner.className = 'weekly-generation-banner';

        if (!canGenerate) {
            banner.classList.add('info');
            statusText.textContent = 'No Active Schedules';
            statusDetails.textContent = 'No weekly schedules found. Create schedules first to generate classes.';
            generateBtn.style.display = 'none';
        } else if (needsGeneration) {
            banner.classList.add('warning');
            statusText.textContent = 'Classes Need Generation';
            statusDetails.textContent = `Week ${weekStartFormatted} - ${weekEndFormatted}: ${existingClassesCount}/${activeSchedulesCount} classes generated. Click to generate missing classes.`;
            generateBtn.style.display = 'inline-block';
        } else {
            banner.classList.add('success');
            statusText.textContent = 'Classes Generated';
            statusDetails.textContent = `Week ${weekStartFormatted} - ${weekEndFormatted}: All ${existingClassesCount} classes generated from schedules.`;
            generateBtn.style.display = 'none';
        }
    }

    async function generateWeeklyClasses() {
        const btn = event.target.closest('button');
        const originalText = btn.innerHTML;

        try {
            btn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Generating...';
            btn.disabled = true;

            const response = await fetch('/DailyClass/GenerateWeeklyClasses', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) throw new Error('Failed to generate classes');

            const result = await response.json();

            if (result.success) {
                showSuccessToast(result.message);
                // Refresh views
                loadDailyClassesOptimized();
                checkWeeklyGenerationStatusOptimized();

                // Close modal if open
                const modal = bootstrap.Modal.getInstance(document.getElementById('weeklyGenerationModal'));
                if (modal) modal.hide();
            } else {
                throw new Error(result.error || 'Unknown error occurred');
            }
        } catch (error) {
            console.error('Error generating weekly classes:', error);
            showErrorToast('Error generating classes: ' + error.message);
        } finally {
            btn.innerHTML = originalText;
            btn.disabled = false;
        }
    }

    async function showWeeklyGenerationStatus() {
        const modal = new bootstrap.Modal(document.getElementById('weeklyGenerationModal'));
        const content = document.getElementById('weeklyGenerationContent');

        modal.show();

        // Show loading
        content.innerHTML = `
            <div class="text-center py-3">
                <div class="spinner"></div>
                <p class="mt-2">Loading generation status...</p>
            </div>
        `;

        try {
            await checkWeeklyGenerationStatusOptimized();

            if (weeklyGenerationStatus && !weeklyGenerationStatus.error) {
                content.innerHTML = renderWeeklyGenerationStatus();

                // Update modal generate button
                const modalBtn = document.getElementById('modalGenerateBtn');
                modalBtn.style.display = weeklyGenerationStatus.canGenerate ? 'inline-block' : 'none';
            } else {
                content.innerHTML = '<div class="alert alert-danger">Error loading status</div>';
            }
        } catch (error) {
            content.innerHTML = '<div class="alert alert-danger">Failed to load status</div>';
        }
    }

    function renderWeeklyGenerationStatus() {
        const {
            activeSchedulesCount,
            existingClassesCount,
            schedulesByDay,
            classesByDay,
            weekStartFormatted,
            weekEndFormatted,
            canGenerate,
            needsGeneration
        } = weeklyGenerationStatus;

        const days = ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];

        return `
            <div class="generation-status-card ${needsGeneration ? 'warning' : 'success'}">
                <h6>Week ${weekStartFormatted} - ${weekEndFormatted}</h6>
                <p class="mb-0">
                    ${canGenerate ?
                        `${existingClassesCount} of ${activeSchedulesCount} possible classes generated from schedules.` :
                        'No active schedules found for class generation.'
                    }
                </p>
            </div>

            <div class="generation-summary">
                <div class="summary-item">
                    <span class="summary-value">${activeSchedulesCount}</span>
                    <span class="summary-label">Active Schedules</span>
                </div>
                <div class="summary-item">
                    <span class="summary-value">${existingClassesCount}</span>
                    <span class="summary-label">Generated Classes</span>
                </div>
                <div class="summary-item">
                    <span class="summary-value">${Math.max(0, activeSchedulesCount - existingClassesCount)}</span>
                    <span class="summary-label">Missing Classes</span>
                </div>
                <div class="summary-item">
                    <span class="summary-value">${activeSchedulesCount > 0 ? Math.round((existingClassesCount / activeSchedulesCount) * 100) : 0}%</span>
                    <span class="summary-label">Completion</span>
                </div>
            </div>

            <h6>Daily Breakdown</h6>
            <div class="day-breakdown">
                ${days.map(day => {
                    const scheduleCount = schedulesByDay[day] || 0;
                    const classCount = classesByDay[day] || 0;
                    const hasSchedules = scheduleCount > 0;
                    const hasClasses = classCount > 0;
                    const needsGen = hasSchedules && classCount < scheduleCount;

                    let className = 'day-item';
                    if (needsGen) className += ' needs-generation';
                    else if (hasClasses) className += ' has-classes';
                    else if (hasSchedules) className += ' has-schedules';

                    return `
                        <div class="${className}">
                            <div class="day-name">${day.substring(0, 3)}</div>
                            <div class="day-counts">
                                ${classCount}/${scheduleCount}
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>

            <div class="mt-3">
                <small class="text-muted">
                    <i class="fas fa-info-circle me-1"></i>
                    Classes are generated from your weekly schedule templates.
                    Each generated class can be individually customized with student counts, costs, and other details.
                </small>
            </div>
        `;
    }

    function generateWeeklyClassesFromModal() {
        generateWeeklyClasses();
    }

    // ==================== CENTER/BRANCH FILTERING (OPTIMIZED) ====================

    async function loadBranchesByCenter() {
        const centerCode = document.getElementById('centerCode').value;
        const branchSelect = document.getElementById('branchCode');
        
        // Clear existing options
        branchSelect.innerHTML = '<option value="">Select Branch</option>';
        
        if (!centerCode) {
            return;
        }

        try {
            const response = await fetch(`/DailyClass/GetBranchesByCenter?centerCode=${centerCode}`);
            if (!response.ok) throw new Error('Failed to load branches');
            
            const branches = await response.json();
            
            // Use document fragment for efficiency
            const fragment = document.createDocumentFragment();
            branches.forEach(branch => {
                const option = document.createElement('option');
                option.value = branch.value;
                option.textContent = branch.text;
                fragment.appendChild(option);
            });
            
            branchSelect.appendChild(fragment);
        } catch (error) {
            console.error('Error loading branches:', error);
            showErrorToast('Failed to load branches for selected center');
        }
    }

    // ==================== DAILY CLASS FUNCTIONS (OPTIMIZED) ====================

    function addClassAtTime(time) {
        if (userContext.hasError) {
            showErrorToast('Unable to add class. Please contact administrator.');
            return;
        }

        resetModalForCreate();
        document.getElementById('startTime').value = time;

        // Set default end time (1 hour later)
        const [hours, minutes] = time.split(':');
        const endHour = (parseInt(hours) + 1) % 24;
        document.getElementById('endTime').value = `${endHour.toString().padStart(2, '0')}:${minutes}`;

        new bootstrap.Modal(document.getElementById('addClassModal')).show();
    }

    function saveClass() {
        console.log('Save class function called');

        if (userContext.hasError) {
            showErrorToast('Unable to save class. Please contact administrator.');
            return;
        }

        const submitBtn = document.getElementById('saveClassBtn');
        const originalText = submitBtn.innerHTML;

        // Validate required fields based on user type
        const requiredFields = [
            { id: 'className', name: 'Class Name' },
            { id: 'startTime', name: 'Start Time' },
            { id: 'endTime', name: 'End Time' },
            { id: 'subjectCode', name: 'Subject' },
            { id: 'branchCode', name: 'Branch' },
            { id: 'hallCode', name: 'Hall' },
            { id: 'eduYearCode', name: 'Education Year' }
        ];

        // Add user-type specific required fields
        if (userContext.isCenter) {
            requiredFields.push({ id: 'teacherCode', name: 'Teacher' });
        } else {
            requiredFields.push({ id: 'centerCode', name: 'Center' });
        }

        for (const field of requiredFields) {
            const element = document.getElementById(field.id);
            if (!element || !element.value || element.value.trim() === '') {
                showErrorToast(`${field.name} is required`);
                if (element) element.focus();
                return;
            }
        }

        const startTime = document.getElementById('startTime').value;
        const endTime = document.getElementById('endTime').value;

        if (startTime >= endTime) {
            showErrorToast('End time must be after start time');
            return;
        }

        // Show loading state
        const loadingText = isEditMode ? 'Updating...' : 'Saving...';
        submitBtn.innerHTML = `<div class="spinner-border spinner-border-sm me-2"></div>${loadingText}`;
        submitBtn.disabled = true;

        const formData = {
            className: document.getElementById('className').value,
            startTime: startTime,
            endTime: endTime,
            subjectCode: parseInt(document.getElementById('subjectCode').value),
            branchCode: parseInt(document.getElementById('branchCode').value),
            hallCode: parseInt(document.getElementById('hallCode').value),
            eduYearCode: parseInt(document.getElementById('eduYearCode').value),
            yearCode: parseInt(document.getElementById('yearCode').value) || null,
            totalAmount: parseFloat(document.getElementById('totalAmount').value) || null,
            teacherAmount: parseFloat(document.getElementById('teacherAmount').value) || null,
            centerAmount: parseFloat(document.getElementById('centerAmount').value) || null,
            rootCode: userContext.currentUserRootCode,
            classDate: currentDate
        };

        // Add user-type specific fields
        if (userContext.isCenter) {
            formData.teacherCode = parseInt(document.getElementById('teacherCode').value);
        } else {
            formData.centerCode = parseInt(document.getElementById('centerCode').value);
        }

        console.log('Form data prepared:', formData);

        const url = isEditMode ? `/DailyClass/EditClass/${editingClassId}` : '/DailyClass/CreateClass';

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                const successMessage = isEditMode ? 'Class updated successfully!' : 'Class created successfully!';
                showSuccessToast(successMessage);
                bootstrap.Modal.getInstance(document.getElementById('addClassModal')).hide();
                resetFormFields();
                resetModalForCreate();
                loadDailyClassesOptimized();
                
                // Clear cache
                cleanCache();
            } else {
                const errorMessage = isEditMode ? 'Error updating class: ' : 'Error creating class: ';
                showErrorToast(errorMessage + (data.error || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Fetch error:', error);
            showErrorToast('Network error occurred: ' + error.message);
        })
        .finally(() => {
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        });
    }

    function showClassDetails(classCode) {
        const cls = dailyClasses.find(c => c.classCode === classCode);
        if (!cls) return;

        // Build display content based on user type
        let organizationInfo = '';
        let teacherInfo = '';

        if (userContext.isCenter) {
            // Center users see teacher information
            teacherInfo = cls.teacherName ? `<div class="detail-item mb-2"><strong>Teacher:</strong> ${cls.teacherName}</div>` : '';
        } else {
            // Teacher users see center and branch information
            organizationInfo = `
                ${cls.centerName ? `<div class="detail-item mb-2"><strong>Center:</strong> ${cls.centerName}</div>` : ''}
                ${cls.branchName ? `<div class="detail-item mb-2"><strong>Branch:</strong> ${cls.branchName}</div>` : ''}
            `;
        }

        const content = `
            <div class="class-details-header text-center mb-3">
                <div class="mb-2">
                    <i class="fas fa-chalkboard-teacher fa-2x text-primary"></i>
                </div>
                <h4>${cls.title}</h4>
                <div class="d-flex justify-content-center gap-2 flex-wrap">
                    <span class="badge bg-primary">Class</span>
                    <span class="badge ${cls.classType === 'schedule' ? 'bg-info' : cls.classType === 'reservation' ? 'bg-warning' : 'bg-success'}">${
                        cls.classType === 'schedule' ? 'Recurring' :
                        cls.classType === 'reservation' ? 'Reserved' :
                        'Direct'
                    }</span>
                    <span class="badge bg-secondary">${userContext.userRootName}</span>
                    ${cls.classDate ? `<span class="badge bg-dark">${cls.classDate}</span>` : ''}
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="detail-item mb-2">
                        <strong>Time:</strong> ${cls.startTime12} - ${cls.endTime12}
                    </div>
                    ${teacherInfo}
                    ${organizationInfo}
                    ${cls.subjectName ? `<div class="detail-item mb-2"><strong>Subject:</strong> ${cls.subjectName}</div>` : ''}
                </div>
                <div class="col-md-6">
                    ${cls.hallName ? `<div class="detail-item mb-2"><strong>Hall:</strong> ${cls.hallName}</div>` : ''}
                    ${cls.eduYearName ? `<div class="detail-item mb-2"><strong>Education Year:</strong> ${cls.eduYearName}</div>` : ''}
                    ${cls.yearName ? `<div class="detail-item mb-2"><strong>Year:</strong> ${cls.yearName}</div>` : ''}
                    ${cls.noOfStudents !== undefined ? `<div class="detail-item mb-2"><strong>Students:</strong> ${cls.noOfStudents} <small class="text-muted">(from attendance)</small></div>` : ''}
                </div>
            </div>

            ${cls.totalAmount || cls.teacherAmount || cls.centerAmount ? `
                <hr>
                <div class="row">
                    ${cls.totalAmount ? `<div class="col-md-4"><strong>Total:</strong> ${cls.totalAmount}</div>` : ''}
                    ${cls.teacherAmount ? `<div class="col-md-4"><strong>Teacher:</strong> ${cls.teacherAmount}</div>` : ''}
                    ${cls.centerAmount ? `<div class="col-md-4"><strong>Center:</strong> ${cls.centerAmount}</div>` : ''}
                </div>
            ` : ''}
        `;

        document.getElementById('classDetailsContent').innerHTML = content;

        // Setup modal buttons
        document.getElementById('editClassBtn').onclick = () => {
            editClassInModal(classCode);
        };

        document.getElementById('deleteClassBtn').onclick = () => {
            deleteClass(classCode);
        };

        new bootstrap.Modal(document.getElementById('classDetailsModal')).show();
    }

    function editClassInModal(classCode) {
        const cls = dailyClasses.find(c => c.classCode === classCode);
        if (!cls) return;

        // Set edit mode
        isEditMode = true;
        editingClassId = classCode;

        // Update modal title
        document.querySelector('#addClassModal .modal-title').innerHTML =
            '<i class="fas fa-edit me-2"></i>Edit Class' +
            (userContext.userRootName ? `<small class="text-muted">for ${userContext.userRootName}</small>` : '');

        // Populate form with existing data
        document.getElementById('className').value = cls.title;
        document.getElementById('startTime').value = cls.startTime;
        document.getElementById('endTime').value = cls.endTime;
        
        if (userContext.isCenter) {
            document.getElementById('teacherCode').value = cls.teacherCode || '';
        } else {
            // For teachers, we might need to populate center if available
            const centerField = document.getElementById('centerCode');
            if (centerField) {
                // You might need to implement logic to get center from class data
            }
        }
        
        document.getElementById('subjectCode').value = cls.subjectCode || '';
        document.getElementById('branchCode').value = cls.branchCode || '';
        document.getElementById('hallCode').value = cls.hallCode || '';
        document.getElementById('eduYearCode').value = cls.eduYearCode || '';
        document.getElementById('yearCode').value = cls.yearCode || '';
        document.getElementById('noOfStudents').value = cls.noOfStudents || '0'; // Show current count but readonly
        document.getElementById('totalAmount').value = cls.totalAmount ? parseFloat(cls.totalAmount) : '';
        document.getElementById('teacherAmount').value = cls.teacherAmount ? parseFloat(cls.teacherAmount) : '';
        document.getElementById('centerAmount').value = cls.centerAmount ? parseFloat(cls.centerAmount) : '';

        // Hide details modal and show edit modal
        bootstrap.Modal.getInstance(document.getElementById('classDetailsModal')).hide();
        new bootstrap.Modal(document.getElementById('addClassModal')).show();
    }

    function deleteClass(classCode) {
        if (!confirm('Are you sure you want to delete this class? This action cannot be undone.')) {
            return;
        }

        fetch('/DailyClass/DeleteClass/' + classCode, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to delete class');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showSuccessToast('Class deleted successfully!');
                bootstrap.Modal.getInstance(document.getElementById('classDetailsModal')).hide();
                loadDailyClassesOptimized();
                
                // Clear cache
                cleanCache();
            } else {
                throw new Error(data.error || 'Failed to delete class');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showErrorToast('Error deleting class: ' + error.message);
        });
    }

    function resetModalForCreate() {
        isEditMode = false;
        editingClassId = null;

        // Reset modal title
        document.querySelector('#addClassModal .modal-title').innerHTML =
            '<i class="fas fa-plus-circle me-2"></i>Add New Class' +
            (userContext.userRootName ? `<small class="text-muted">for ${userContext.userRootName}</small>` : '');

        // Clear form fields
        resetFormFields();
    }

    function resetFormFields() {
        const fieldIds = ['className', 'startTime', 'endTime', 'subjectCode', 'branchCode', 'hallCode', 'eduYearCode', 'yearCode', 'totalAmount', 'teacherAmount', 'centerAmount'];
        
        // Add user-type specific fields
        if (userContext.isCenter) {
            fieldIds.push('teacherCode');
        } else {
            fieldIds.push('centerCode');
        }

        fieldIds.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                if (element.type === 'select-one') {
                    element.selectedIndex = 0;
                } else {
                    element.value = '';
                }
            }
        });

        // Set student count to 0 for new classes (always readonly)
        document.getElementById('noOfStudents').value = '0';

        // Update date fields
        updateDateDisplay();
    }

    function refreshClasses() {
        // Clear cache and reload
        cleanCache();
        loadDailyClassesOptimized();
        showSuccessToast('Classes refreshed!');
    }

    function showWelcomeMessage() {
        let message = 'Welcome to Daily Classes Management!';

        if (userContext.userRootName) {
            const userType = userContext.isCenter ? 'Center' : 'Teacher';
            message = `Welcome ${userContext.userRootName}! Manage your daily classes here as a ${userType}.`;
        }

        showToast(message, 'bg-info');
    }

    // ==================== UTILITY FUNCTIONS (OPTIMIZED) ====================

    function cleanCache() {
        const now = Date.now();
        
        // Clean classes cache
        for (const [key, value] of classesCache.entries()) {
            if (now - value.timestamp > cacheTimeout) {
                classesCache.delete(key);
            }
        }
        
        // Limit cache size
        if (classesCache.size > 50) {
            const entries = Array.from(classesCache.entries());
            entries.sort((a, b) => a[1].timestamp - b[1].timestamp);
            
            // Remove oldest 10 entries
            for (let i = 0; i < 10; i++) {
                classesCache.delete(entries[i][0]);
            }
        }

        // Clear dropdown cache if too old
        if (dropdownCache && (now - dropdownCache.timestamp) > cacheTimeout) {
            dropdownCache = null;
        }
    }

    function showLoadingOverlay() {
        let overlay = document.getElementById('loadingOverlay');
        if (!overlay) {
            overlay = document.createElement('div');
            overlay.id = 'loadingOverlay';
            overlay.className = 'loading-overlay';
            overlay.innerHTML = '<div class="spinner"></div>';

            const container = document.querySelector('.timeline-container');
            if (container) {
                container.appendChild(overlay);
            }
        }
        overlay.style.display = 'flex';
    }

    function hideLoadingOverlay() {
        const overlay = document.getElementById('loadingOverlay');
        if (overlay) {
            overlay.style.display = 'none';
        }
    }

    function hideInitialLoader() {
        const loader = document.getElementById('initialLoader');
        if (loader) {
            loader.style.opacity = '0';
            setTimeout(() => {
                if (loader.parentNode) {
                    loader.remove();
                }
            }, 300);
        }
    }

    function showSuccessToast(message) {
        showToast(message, 'bg-success');
    }

    function showErrorToast(message) {
        showToast(message, 'bg-danger');
    }

    function showToast(message, bgClass) {
        const toastContainer = document.querySelector('.toast-container');
        const toastId = 'toast-' + Date.now();

        const toastHtml = `
            <div class="toast ${bgClass} text-white" role="alert" id="${toastId}">
                <div class="toast-body d-flex align-items-center">
                    <i class="fas ${bgClass === 'bg-success' ? 'fa-check-circle' : 'fa-exclamation-circle'} me-2"></i>
                    <span class="flex-grow-1">${message}</span>
                    <button type="button" class="btn-close btn-close-white ms-2" data-bs-dismiss="toast"></button>
                </div>
            </div>
        `;

        toastContainer.insertAdjacentHTML('beforeend', toastHtml);
        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement);
        toast.show();

        toastElement.addEventListener('hidden.bs.toast', () => {
            toastElement.remove();
        });
    }
</script>