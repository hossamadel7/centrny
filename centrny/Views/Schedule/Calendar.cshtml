@{
    ViewData["Title"] = "Schedule Calendar";
}

<link href='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/6.1.8/index.min.css' rel='stylesheet' />
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<div class="schedule-page">
    <div class="container-fluid calendar-page">
        <div class="calendar-container">
            <!-- Page Header -->
            <div class="page-header">
                <h1><i class="fas fa-calendar-week me-3"></i>Weekly Schedule Template</h1>
                <p>Manage your recurring weekly schedules - no dates, just your weekly pattern</p>
            </div>

            <!-- User Context Banner or Error Message -->
            @if (ViewBag.Error != null)
            {
                <div class="error-banner">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>@ViewBag.Error</strong>
                </div>
            }
            else if (ViewBag.CurrentUserRootCode != null)
            {
                <div class="user-context-banner @(ViewBag.IsCenter ? "center-banner" : "teacher-banner")">
                    <h6>
                        <i class="fas @(ViewBag.IsCenter ? "fa-building" : "fa-user-circle") me-2"></i>
                        Your schedules for: <strong>@ViewBag.UserRootName</strong>
                        <span class="badge ms-2">
                            @if (ViewBag.IsCenter == true)
                            {
                                @if (ViewBag.IsBranchManager == true)
                                {
                                    <text>Branch Manager</text>
                                }
                                else
                                {
                                    <text>Center Admin</text>
                                }
                            }
                            else
                            {
                                <text>Teacher</text>
                            }
                            - Root Code: @ViewBag.CurrentUserRootCode
                        </span>
                    </h6>
                    <small>
                        @if (ViewBag.IsCenter == true)
                        {
                            @if (ViewBag.IsBranchManager == true)
                            {
                                <text>You can view and manage schedules for your assigned branch only</text>
                            }
                            else
                            {
                                <text>You can view and manage schedules for all branches in your center</text>
                            }
                        }
                        else
                        {
                            <text>You can view and manage schedules for your assigned teaching account only</text>
                        }
                    </small>
                </div>
            }

            @if (ViewBag.Error == null)
            {
                <!-- Legend -->
                <div class="legend">
                    <div class="legend-item">
                        <i class="fas fa-layer-group text-info me-2"></i>
                        <span>Multiple classes can run simultaneously</span>
                    </div>
                    <div class="legend-item">
                        <i class="fas fa-mouse-pointer text-primary me-2"></i>
                        <span>Click any schedule to view/edit/delete</span>
                    </div>
                </div>

                <!-- Controls -->
                <div class="controls-section">
                    <button type="button" class="btn-modern btn-success" data-bs-toggle="modal" data-bs-target="#scheduleModal">
                        <i class="fas fa-plus"></i> Add Schedule
                    </button>
                    <a href="@Url.Action("Index")" class="btn-modern btn-info">
                        <i class="fas fa-list"></i> List View
                    </a>
                    <button type="button" class="btn-modern" onclick="refreshSchedules()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                </div>

                <!-- Week Template Info -->
                <div class="week-template-info">
                    <h5><i class="fas fa-repeat me-2"></i>Weekly Schedule Template</h5>
                    <p>
                        This template shows your recurring weekly schedule pattern for <strong>@ViewBag.UserRootName</strong>.
                        These schedules automatically repeat every week.
                    </p>
                </div>

                <!-- Custom Weekly Template Grid -->
                <div class="weekly-template-grid" style="position: relative;">
                    <div class="loading-overlay" id="initialLoader">
                        <div class="spinner"></div>
                    </div>

                    <div class="week-header">
                        Weekly Schedule Template
                        @if (ViewBag.UserRootName != null)
                        {
                            <small class="ms-3 opacity-75">(@ViewBag.UserRootName)</small>
                        }
                    </div>

                    <div class="days-grid">
                        <div class="day-column" data-day="Sunday">
                            <div class="day-header">Sunday</div>
                            <div class="day-content" id="day-Sunday">
                                <div class="empty-day">No schedules</div>
                                <button class="add-schedule-btn" onclick="addScheduleForDay('Sunday')" title="Add schedule for Sunday">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>

                        <div class="day-column" data-day="Monday">
                            <div class="day-header">Monday</div>
                            <div class="day-content" id="day-Monday">
                                <div class="empty-day">No schedules</div>
                                <button class="add-schedule-btn" onclick="addScheduleForDay('Monday')" title="Add schedule for Monday">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>

                        <div class="day-column" data-day="Tuesday">
                            <div class="day-header">Tuesday</div>
                            <div class="day-content" id="day-Tuesday">
                                <div class="empty-day">No schedules</div>
                                <button class="add-schedule-btn" onclick="addScheduleForDay('Tuesday')" title="Add schedule for Tuesday">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>

                        <div class="day-column" data-day="Wednesday">
                            <div class="day-header">Wednesday</div>
                            <div class="day-content" id="day-Wednesday">
                                <div class="empty-day">No schedules</div>
                                <button class="add-schedule-btn" onclick="addScheduleForDay('Wednesday')" title="Add schedule for Wednesday">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>

                        <div class="day-column" data-day="Thursday">
                            <div class="day-header">Thursday</div>
                            <div class="day-content" id="day-Thursday">
                                <div class="empty-day">No schedules</div>
                                <button class="add-schedule-btn" onclick="addScheduleForDay('Thursday')" title="Add schedule for Thursday">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>

                        <div class="day-column" data-day="Friday">
                            <div class="day-header">Friday</div>
                            <div class="day-content" id="day-Friday">
                                <div class="empty-day">No schedules</div>
                                <button class="add-schedule-btn" onclick="addScheduleForDay('Friday')" title="Add schedule for Friday">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>

                        <div class="day-column" data-day="Saturday">
                            <div class="day-header">Saturday</div>
                            <div class="day-content" id="day-Saturday">
                                <div class="empty-day">No schedules</div>
                                <button class="add-schedule-btn" onclick="addScheduleForDay('Saturday')" title="Add schedule for Saturday">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (ViewBag.Error == null)
{
    <!-- Floating Add Button -->
    <button class="floating-add-btn" data-bs-toggle="modal" data-bs-target="#scheduleModal" title="Add New Schedule">
        <i class="fas fa-plus"></i>
    </button>

    <!-- Main Schedule Modal (Create/Edit) -->
    <div class="modal fade schedule-modal" id="scheduleModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" id="scheduleModalHeader">
                    <h5 class="modal-title" id="scheduleModalTitle">
                        <i class="fas fa-calendar-plus me-2"></i>Add New Schedule
                        @if (ViewBag.UserRootName != null)
                        {
                            <small class="text-muted">for @ViewBag.UserRootName</small>
                        }
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="scheduleForm">
                        <!-- User context info in form - Only for Center Users -->
                        @if (ViewBag.CurrentUserRootCode != null && ViewBag.IsCenter == true)
                        {
                            <div class="alert alert-info mb-3">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Note:</strong> This schedule will be created for <strong>@ViewBag.UserRootName</strong>
                                (Center - Root Code: @ViewBag.CurrentUserRootCode)
                                @if (ViewBag.BranchName != null)
                                {
                                    <span> at <strong>@ViewBag.BranchName</strong></span>
                                }
                                <br>
                                <small class="text-muted">Center will be automatically assigned. Select branch and teacher for this schedule.</small>
                            </div>
                        }

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Schedule Name *</label>
                                <input type="text" class="form-control" id="scheduleName" required placeholder="Enter schedule name">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Day of Week *</label>
                                <select class="form-select" id="dayOfWeek" required>
                                    <option value="">Select Day</option>
                                    <option value="Sunday">Sunday</option>
                                    <option value="Monday">Monday</option>
                                    <option value="Tuesday">Tuesday</option>
                                    <option value="Wednesday">Wednesday</option>
                                    <option value="Thursday">Thursday</option>
                                    <option value="Friday">Friday</option>
                                    <option value="Saturday">Saturday</option>
                                </select>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Start Time *</label>
                                <input type="time" class="form-control" id="startTime" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">End Time *</label>
                                <input type="time" class="form-control" id="endTime" required>
                            </div>
                        </div>

                        <!-- Root is hidden and auto-set -->
                        <input type="hidden" id="rootCode" value="@ViewBag.CurrentUserRootCode">

                        <!-- Center and Branch dropdowns - Updated for both user types -->
                        <div class="row">
                            @if (ViewBag.IsCenter == true)
                            {
                                <!-- For CENTER USERS: NO CENTER FIELD, just hidden input -->
                                <input type="hidden" id="centerCode" value="@ViewBag.SingleCenterCode">
                                
                                @if (ViewBag.IsBranchManager == true)
                                {
                                    <!-- Branch Manager: Hidden branch field (auto-assigned) -->
                                    <input type="hidden" id="branchCode" value="@ViewBag.AssignedBranchCode">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Branch (Auto-assigned)</label>
                                        <input type="text" class="form-control" value="Your assigned branch" readonly>
                                        <small class="text-muted">Branch is automatically assigned based on your role</small>
                                    </div>
                                }
                                else
                                {
                                    <!-- Center Admin: Show branch dropdown for selection -->
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Branch</label>
                                        <select class="form-select" id="branchCode" onchange="loadHallsForBranch()">
                                            <option value="">Select Branch (Optional)</option>
                                            <!-- Branches will be loaded via JavaScript -->
                                        </select>
                                        <small class="text-muted">Select branch for this schedule</small>
                                    </div>
                                }
                                
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Educational Year</label>
                                    <select class="form-select" id="eduYearCode">
                                        <option value="">Select Year (Optional)</option>
                                        @if (ViewData["EduYearCode"] != null)
                                        {
                                            @foreach (var item in (Microsoft.AspNetCore.Mvc.Rendering.SelectList)ViewData["EduYearCode"])
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    </select>
                                </div>
                            }
                            else
                            {
                                <!-- For TEACHER USERS: Show center and branch fields -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Center</label>
                                    <select class="form-select" id="centerCode" onchange="loadBranchesForCenter()">
                                        <option value="">Select Center (Optional)</option>
                                        @if (ViewData["CenterCode"] != null)
                                        {
                                            @foreach (var item in (Microsoft.AspNetCore.Mvc.Rendering.SelectList)ViewData["CenterCode"])
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Branch</label>
                                    <select class="form-select" id="branchCode" onchange="loadHallsForBranch()">
                                        <option value="">Select Center First</option>
                                    </select>
                                </div>
                            }
                        </div>

                        <!-- Halls row - separate for both user types -->
                        <div class="row">
                            @if (ViewBag.IsCenter == true)
                            {
                                <!-- For CENTER USERS: Hall -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Hall</label>
                                    <select class="form-select" id="hallCode">
                                        <option value="">Select Branch First</option>
                                    </select>
                                    <small class="text-muted">Select branch first to see available halls</small>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <!-- Empty space for center users -->
                                </div>
                            }
                            else
                            {
                                <!-- For TEACHER USERS: Hide hall field completely, Educational Year only -->
                                <input type="hidden" id="hallCode" value="">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Educational Year</label>
                                    <select class="form-select" id="eduYearCode">
                                        <option value="">Select Year (Optional)</option>
                                        @if (ViewData["EduYearCode"] != null)
                                        {
                                            @foreach (var item in (Microsoft.AspNetCore.Mvc.Rendering.SelectList)ViewData["EduYearCode"])
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <!-- Empty space for teacher users -->
                                </div>
                            }
                        </div>

                        <!-- Teacher and Year section - UPDATED LOGIC FOR TEACHER USERS -->
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Year *</label>
                                <select class="form-select" id="yearCode" required>
                                    <option value="">Select Year</option>
                                    @if (ViewBag.IsTeacher != true)
                                    {
                                        <!-- For CENTER USERS: Show all years normally -->
                                        @if (ViewData["YearCode"] != null)
                                        {
                                            @foreach (var item in (Microsoft.AspNetCore.Mvc.Rendering.SelectList)ViewData["YearCode"])
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    }
                                    <!-- For TEACHER USERS: Years will be loaded via AJAX -->
                                </select>
                            </div>
                            
                            @if (ViewBag.IsCenter == true)
                            {
                                <!-- For CENTER USERS: Show teacher dropdown (required) -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Teacher *</label>
                                    <select class="form-select" id="teacherCode" required onchange="loadSubjectsForTeacher()">
                                        <option value="">Select Teacher</option>
                                        @if (ViewData["TeacherCode"] != null)
                                        {
                                            @foreach (var item in (Microsoft.AspNetCore.Mvc.Rendering.SelectList)ViewData["TeacherCode"])
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                        else
                                        {
                                            <option value="">No teachers data available</option>
                                        }
                                    </select>
                                </div>
                            }
                            else
                            {
                                <!-- For TEACHER USERS: Hide teacher dropdown completely, auto-assign via backend -->
                                <input type="hidden" id="teacherCode" value="">
                                <div class="col-md-6 mb-3">
                                    <!-- Empty space for teacher users - no assignment field shown -->
                                </div>
                            }
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Subject</label>
                                <select class="form-select" id="subjectCode">
                                    <option value="">Select Subject (Optional)</option>
                                    @if (ViewBag.IsCenter == true)
                                    {
                                        <!-- For CENTER USERS: Will be loaded after selecting teacher -->
                                    }
                                    else
                                    {
                                        <!-- For TEACHER USERS: Will be loaded after selecting year -->
                                    }
                                </select>
                                @if (ViewBag.IsTeacher == true)
                                {
                                    <small class="text-muted">Select year first to see your subjects</small>
                                }
                                else
                                {
                                    <small class="text-muted">Available subjects will appear after selecting a teacher</small>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Amount</label>
                                <input type="number" class="form-control" id="scheduleAmount" step="0.01" min="0" placeholder="0.00">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn-modern btn-success" id="saveScheduleBtn">
                        <i class="fas fa-save me-2"></i><span class="btn-text">Save Schedule</span>
                        <div class="spinner-border spinner-border-sm d-none" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Event Details Modal -->
    <div class="modal fade schedule-modal" id="eventDetailsModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-info-circle me-2"></i>Schedule Details
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="eventDetailsContent"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn-modern btn-info" id="editEventBtn">
                        <i class="fas fa-edit me-2"></i>Edit
                    </button>
                    <button type="button" class="btn-modern btn-danger" id="deleteEventBtn">
                        <i class="fas fa-trash me-2"></i>Delete
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade schedule-modal" id="deleteConfirmModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2"></i>Confirm Delete
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="delete-warning">
                        <h5><i class="fas fa-exclamation-triangle me-2"></i>Warning</h5>
                        <p class="mb-0">This action cannot be undone. Are you sure you want to delete this schedule?</p>
                    </div>
                    <div class="schedule-summary" id="deleteScheduleSummary">
                        <!-- Schedule details will be inserted here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn-modern btn-danger" id="confirmDeleteBtn">
                        <i class="fas fa-trash me-2"></i>Delete Schedule
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Toast Container -->
<div class="toast-container"></div>

<!-- Anti-forgery token for AJAX requests -->
@Html.AntiForgeryToken()

<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

<!-- Include the common schedule management JavaScript -->
<script src="~/js/schedule-common.js"></script>

<script>
    // Set up user context for the common script
    window.userContext = {
        currentUserRootCode: @Json.Serialize(ViewBag.CurrentUserRootCode),
        userRootName: @Json.Serialize(ViewBag.UserRootName ?? ""),
        isCenter: @Json.Serialize(ViewBag.IsCenter ?? false),
        isTeacher: @Json.Serialize(ViewBag.IsTeacher ?? false),
        branchName: @Json.Serialize(ViewBag.BranchName ?? ""),
        singleCenterCode: @Json.Serialize(ViewBag.SingleCenterCode ?? null),
        isBranchManager: @Json.Serialize(ViewBag.IsBranchManager ?? false),
        assignedBranchCode: @Json.Serialize(ViewBag.AssignedBranchCode ?? null),
        hasError: @Json.Serialize(ViewBag.Error != null)
    };

    // Calendar-specific functionality
    class CalendarScheduleManager {
        constructor() {
            this.schedules = [];
            this.setupCalendarSpecific();
            this.setupDoubleClickPrevention();
        }

        setupCalendarSpecific() {
            // Override the common manager's callbacks
            if (typeof scheduleManager !== 'undefined') {
                scheduleManager.onScheduleSaved = () => this.refreshSchedules();
                scheduleManager.onScheduleDeleted = () => this.refreshSchedules();
            }
            
            // Initialize calendar
            if (!window.userContext.hasError) {
                this.loadSchedules();
                setTimeout(() => {
                    this.hideInitialLoader();
                    this.showWelcomeMessage();
                }, 1000);
            }
        }

        setupDoubleClickPrevention() {
            const saveButton = document.getElementById('saveScheduleBtn');
            if (saveButton) {
                let isSubmitting = false;
                
                saveButton.addEventListener('click', (e) => {
                    if (isSubmitting) {
                        e.preventDefault();
                        e.stopPropagation();
                        return false;
                    }
                    
                    isSubmitting = true;
                    
                    // Disable button and show loading state
                    saveButton.disabled = true;
                    const btnText = saveButton.querySelector('.btn-text');
                    const spinner = saveButton.querySelector('.spinner-border');
                    
                    if (btnText) btnText.textContent = 'Saving...';
                    if (spinner) spinner.classList.remove('d-none');
                    
                    // Re-enable after operation completes (or fails)
                    if (typeof scheduleManager !== 'undefined') {
                        const originalCallback = scheduleManager.onScheduleSaved;
                        scheduleManager.onScheduleSaved = () => {
                            this.resetSaveButton();
                            isSubmitting = false;
                            if (originalCallback) originalCallback();
                        };
                        
                        // Also handle errors
                        const originalError = scheduleManager.onScheduleError || (() => {});
                        scheduleManager.onScheduleError = (error) => {
                            this.resetSaveButton();
                            isSubmitting = false;
                            originalError(error);
                        };
                    }
                    
                    // Reset after 10 seconds as failsafe
                    setTimeout(() => {
                        if (isSubmitting) {
                            this.resetSaveButton();
                            isSubmitting = false;
                        }
                    }, 10000);
                });
            }
        }

        resetSaveButton() {
            const saveButton = document.getElementById('saveScheduleBtn');
            if (saveButton) {
                saveButton.disabled = false;
                const btnText = saveButton.querySelector('.btn-text');
                const spinner = saveButton.querySelector('.spinner-border');
                
                if (btnText) btnText.textContent = 'Save Schedule';
                if (spinner) spinner.classList.add('d-none');
            }
        }

        async loadSchedules() {
            try {
                const response = await fetch('/Schedule/GetCalendarEvents?start=2000-01-01&end=2030-12-31');
                const events = await response.json();
                
                this.schedules = events;
                
                // Transform events to schedule format for the common manager
                if (typeof scheduleManager !== 'undefined') {
                    scheduleManager.allSchedules = events.map(event => ({
                        scheduleCode: event.extendedProps?.scheduleCode || 0,
                        scheduleName: event.title || 'Untitled',
                        dayOfWeek: event.extendedProps?.dayOfWeek || '',
                        startTime: event.extendedProps?.startTime || '',
                        endTime: event.extendedProps?.endTime || '',
                        hallName: event.extendedProps?.hallName || '',
                        hallCode: event.extendedProps?.hallCode || null,
                        teacherName: event.extendedProps?.teacherName || '',
                        teacherCode: event.extendedProps?.teacherCode || null,
                        subjectName: event.extendedProps?.subjectName || '',
                        subjectCode: event.extendedProps?.subjectCode || null,
                        centerName: event.extendedProps?.centerName || '',
                        centerCode: event.extendedProps?.centerCode || null,
                        branchName: event.extendedProps?.branchName || '',
                        branchCode: event.extendedProps?.branchCode || null,
                        eduYearCode: event.extendedProps?.eduYearCode || null,
                        yearCode: event.extendedProps?.yearCode || null,
                        scheduleAmount: event.extendedProps?.scheduleAmount || null,
                        isCenter: event.extendedProps?.isCenter || false
                    }));
                }
                
                this.renderWeeklyGrid();
                console.log('✅ Schedules loaded for Calendar view:', this.schedules.length);
            } catch (error) {
                console.error('❌ Error loading schedules:', error);
                if (typeof scheduleManager !== 'undefined' && scheduleManager.showToast) {
                    scheduleManager.showToast('Error', 'Failed to load schedules', 'error');
                }
            }
        }

        // UPDATED: Weekly grid rendering with teacher/center display logic for Calendar.cshtml
        renderWeeklyGrid() {
            const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            
            days.forEach(day => {
                const dayContainer = document.getElementById(`day-${day}`);
                if (!dayContainer) return;
                
                const daySchedules = this.schedules.filter(s => s.extendedProps?.dayOfWeek === day);
                
                if (daySchedules.length === 0) {
                    dayContainer.innerHTML = `
                        <div class="empty-day">No schedules</div>
                        <button class="add-schedule-btn" onclick="addScheduleForDay('${day}')" title="Add schedule for ${day}">
                            <i class="fas fa-plus"></i>
                        </button>
                    `;
                } else {
                    let html = '';
                    
                    // Determine what to show based on user context
                    const isCurrentUserCenter = window.userContext?.isCenter === true;
                    const isCurrentUserTeacher = window.userContext?.isTeacher === true;
                    
                    daySchedules.forEach(schedule => {
                        const eventClass = schedule.extendedProps?.isCenter ? 'center-event' : 'teacher-event';
                        const s = schedule.extendedProps;
                        
                        html += `
                            <div class="schedule-event ${eventClass}" onclick="showScheduleDetails(${s?.scheduleCode || 0})">
                                <div class="event-title">
                                    <i class="fas fa-${s?.isCenter ? 'building' : 'user'}"></i>
                                    ${schedule.title || 'Untitled'}
                                </div>
                                <div class="event-time">${s?.startTime || ''} - ${s?.endTime || ''}</div>
                                ${s?.hallName ? `<div class="event-details">📍 ${s.hallName}</div>` : ''}
                        `;
                        
                        // Show different information based on current user type
                        if (isCurrentUserTeacher) {
                            // For TEACHER users: Show Center + Branch instead of teacher name
                            if (s?.centerName && s?.branchName) {
                                html += `<div class="event-details">🏢 ${s.centerName} - ${s.branchName}</div>`;
                            } else if (s?.centerName) {
                                html += `<div class="event-details">🏢 ${s.centerName}</div>`;
                            } else if (s?.branchName) {
                                html += `<div class="event-details">🏢 ${s.branchName}</div>`;
                            }
                        } else if (isCurrentUserCenter) {
                            // For CENTER users: Show Teacher name as before
                            if (s?.teacherName) {
                                html += `<div class="event-details">👨‍🏫 ${s.teacherName}</div>`;
                            }
                        }
                        
                        // Always show subject if available
                        if (s?.subjectName) {
                            html += `<div class="event-details">📚 ${s.subjectName}</div>`;
                        }
                        
                        html += `
                            </div>
                        `;
                    });
                    
                    html += `
                        <button class="add-schedule-btn" onclick="addScheduleForDay('${day}')" title="Add schedule for ${day}">
                            <i class="fas fa-plus"></i>
                        </button>
                    `;
                    
                    dayContainer.innerHTML = html;
                }
            });
        }

        refreshSchedules() {
            console.log('🔄 Refreshing calendar schedules...');
            this.loadSchedules();
        }

        hideInitialLoader() {
            const loader = document.getElementById('initialLoader');
            if (loader) {
                loader.style.display = 'none';
            }
        }

        showWelcomeMessage() {
            if (window.userContext.currentUserRootCode) {
                if (typeof scheduleManager !== 'undefined' && scheduleManager.showToast) {
                    scheduleManager.showToast(
                        'Welcome!', 
                        `Calendar loaded for ${window.userContext.userRootName}`, 
                        'success'
                    );
                }
            }
        }
    }

    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Calendar-specific manager
        const calendarManager = new CalendarScheduleManager();
        
        // Calendar-specific global functions (for backward compatibility)
        window.refreshSchedules = () => calendarManager.refreshSchedules();
        window.addScheduleForDay = (day) => {
            if (typeof scheduleManager !== 'undefined' && scheduleManager.addScheduleForDay) {
                scheduleManager.addScheduleForDay(day);
            } else {
                // Fallback implementation
                const daySelect = document.getElementById('dayOfWeek');
                if (daySelect) {
                    daySelect.value = day;
                }
                const modal = new bootstrap.Modal(document.getElementById('scheduleModal'));
                modal.show();
            }
        };
        window.showScheduleDetails = (scheduleCode) => {
            if (typeof scheduleManager !== 'undefined' && scheduleManager.showScheduleDetails) {
                scheduleManager.showScheduleDetails(scheduleCode);
            }
        };
    });
</script>