@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizerFactory LocalizerFactory
@using centrny.Controllers
@model StudentProfileViewModel
@{
    var Localizer = LocalizerFactory.Create("Student", System.Reflection.Assembly.GetExecutingAssembly().GetName().Name);
    ViewData["Title"] = Localizer["StudentProfile"];
    var isArabic = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == "ar";
    var htmlLang = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;
    var htmlDir = isArabic ? "rtl" : "ltr";
    Layout = null;
}
<!DOCTYPE html>
<html lang="@htmlLang" dir="@htmlDir">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    @if (isArabic)
    {
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.rtl.min.css" rel="stylesheet" />
    }
    else
    {
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
    }
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
    <link href="~/css/student-profile.css" rel="stylesheet" />
    <style>
        html[dir="rtl"] body,
        html[dir="rtl"] .container-fluid,
        html[dir="rtl"] .profile-content {
            direction: rtl;
            text-align: right;
        }
        .class-warning {
            color: #d32f2f;
            font-weight: bold;
            margin-bottom: 0.3em;
            font-size: 1em;
        }

        .attendance-password-modal {
            position: fixed;
            z-index: 1050;
        }
        .attendance-password-modal .modal-dialog {
            position: relative;
            z-index: 1100;
        }
        .attendance-password-modal .modal-dialog * {
            pointer-events: auto;
        }
    </style>
</head>
<body>


    <!-- JS Localization keys -->
    <div id="js-localization"
         data-student-profile="@Localizer["StudentProfile"]"
         data-academic-year="@Localizer["AcademicYear"]"
         data-branch="@Localizer["Branch"]"
         data-student="@Localizer["Student"]"
         data-active-student="@Localizer["ActiveStudent"]"
         data-inactive-student="@Localizer["InactiveStudent"]"
         data-parent-phone="@Localizer["ParentPhone"]"
         data-student-phone="@Localizer["StudentPhone"]"
         data-todays-classes="@Localizer["TodaysClasses"]"
         data-admin-view="@Localizer["AdminView"]"
         data-viewing-todays-classes-only-admins="@Localizer["ViewingTodaysClassesOnlyAdmins"]"
         data-loading-todays-classes="@Localizer["LoadingTodaysClasses"]"
         data-enrolled-subjects="@Localizer["EnrolledSubjects"]"
         data-search-subjects="@Localizer["SearchSubjects"]"
         data-loading-subjects="@Localizer["LoadingSubjects"]"
         data-weekly-classes="@Localizer["WeeklyClasses"]"
         data-no-subjects-found="@Localizer["NoSubjectsFound"]"
         data-no-subjects-found-msg="@Localizer["NoSubjectsFoundMsg"]"
         data-no-classes-available="@Localizer["NoClassesAvailable"]"
         data-no-classes-available-msg="@Localizer["NoClassesAvailableMsg"]"
         data-no-classes-this-week="@Localizer["NoClassesThisWeek"]"
         data-no-classes-this-week-msg="@Localizer["NoClassesThisWeekMsg"]"
         data-loading-weekly-classes="@Localizer["LoadingWeeklyClasses"]"
         data-error="@Localizer["Error"]"
         data-failed-to-load-subjects="@Localizer["FailedToLoadSubjects"]"
         data-failed-to-load-classes="@Localizer["FailedToLoadClasses"]"
         data-attended="@Localizer["Attended"]"
         data-already-attended="@Localizer["AlreadyAttended"]"
         data-mark-attendance="@Localizer["MarkAttendance"]"
         data-not-available-for-attendance="@Localizer["NotAvailableForAttendance"]"
         data-only-admins-attendance="@Localizer["OnlyAdminsAttendance"]"
         data-attendance-marked-successfully="@Localizer["AttendanceMarkedSuccessfully"]"
         data-failed-to-mark-attendance="@Localizer["FailedToMarkAttendance"]"
         data-attendance-error="@Localizer["AttendanceError"]"
         data-marking="@Localizer["Marking"]"
         data-start-time="@Localizer["StartTime"]"
         data-end-time="@Localizer["EndTime"]"
         data-free="@Localizer["Free"]"
         data-online="@Localizer["Online"]"
         data-in-person="@Localizer["InPerson"]"
         data-na="@Localizer["NA"]" />
    <div class="container-fluid student-profile-page">
        <div class="profile-container">
            <!-- Profile Header -->
            <!-- Replace the profile header section in your Profile.cshtml with this updated version -->
            <!-- Profile Header -->
            <div class="profile-header">
                <div class="container">
                    <div class="row align-items-center justify-content-center g-4">
                        <div class="col-12 main-profile text-center">
                            <div class="profile-avatar"><i class="fas fa-user-graduate"></i></div>
                            <h1 class="profile-name">@Model.StudentName</h1>
                            <p class="profile-subtitle">@Model.YearName @(!string.IsNullOrEmpty(Model.LevelName) ? $"- {Model.LevelName}" : "") <span id="student-label"></span></p>
                            <div class="profile-status">
                                <i class="fas @(Model.IsActive ? "fa-check-circle" : "fa-times-circle")"></i>
                                <span id="status-label"></span>
                            </div>

                            <!-- Online Signup Button (only shows if student has no username/password) -->
                            @if (string.IsNullOrEmpty(Model.StudentUsername))
                            {
                                <div class="online-signup-button-container">
                                    <button id="setupOnlineAccessBtn" class="setup-online-btn">
                                        <i class="fas fa-user-plus"></i>
                                        Sign Up for Online Access
                                    </button>
                                </div>
                            }

                            <div class="row justify-content-center mt-4">
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <span class="card-icon"><i class="fas fa-graduation-cap"></i></span>
                                            <span class="card-label">@Localizer["AcademicYear"]:</span>
                                            <span class="card-value">@(!string.IsNullOrEmpty(Model.YearName) ? Model.YearName : "")</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <span class="card-icon"><i class="fas fa-building"></i></span>
                                            <span class="card-label">@Localizer["Branch"]:</span>
                                            <span class="card-value">@(!string.IsNullOrEmpty(Model.BranchName) ? Model.BranchName : "")</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <span class="card-icon"><i class="fas fa-phone-alt"></i></span>
                                            <span class="card-label">@Localizer["ParentPhone"]:</span>
                                            <span class="card-value">@Model.StudentParentPhone</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-3 mb-3">
                                    <div class="header-info-card">
                                        <div class="card-content">
                                            <span class="card-icon"><i class="fas fa-phone"></i></span>
                                            <span class="card-label">@Localizer["StudentPhone"]:</span>
                                            <span class="card-value">@Model.StudentPhone</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <a href="@Url.Action("StudentData", "Student", new { item_key = Model.ItemKey })" class="modern-link-btn">
                                <i class="fas fa-tasks"></i> @Localizer["ViewAssignmentsAndExams"]
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="profile-content">
                <!-- Upcoming Classes -->
                <div class="section-card">
                    <div class="section-header">
                        <h2 class="section-title" id="todays-classes-title"></h2>
                        @if (Model.CanMarkAttendance)
                        {
                            <span id="admin-view-label" class="admin-badge"></span>
                        }
                    </div>
                    <div class="section-content">
                        @if (!Model.CanMarkAttendance)
                        {
                            <div class="unauthorized-message">
                                <i class="fas fa-info-circle"></i>
                                <span id="viewing-todays-classes-only-admins-label"></span>
                            </div>
                        }
                        <div id="upcomingClassesGrid" class="upcoming-classes-grid">
                            <div class="loading-spinner">
                                <div class="spinner"></div>
                                <span id="loading-todays-classes-label"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Student Subjects -->
                <div class="section-card">
                    <div class="section-header">
                        <h2 class="section-title" id="enrolled-subjects-title"></h2>
                        <div class="filter-controls">
                            <input type="text" id="subjectSearch" class="search-input" placeholder="" />
                        </div>
                    </div>
                    <div class="section-content">
                        <div id="subjectsGrid" class="subjects-grid">
                            <div class="loading-spinner">
                                <div class="spinner"></div>
                                <span id="loading-subjects-label"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Weekly Classes Modal -->
    <div id="weeklyModal" class="modal-overlay" aria-hidden="true" role="dialog" aria-modal="true">
        <div class="weekly-modal" role="document">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle"></h3>
                <button class="close-btn" onclick="closeWeeklyModal()" aria-label="Close weekly modal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body" id="modalBody"></div>
        </div>
    </div>

    <!-- Attendance Password Modal -->
    <div id="attendancePasswordModal" class="attendance-password-modal" aria-hidden="true" role="dialog" aria-modal="true">
        <div class="modal-dialog" role="document" onclick="event.stopPropagation();">
            <div class="modal-header">
                Attendance Authorization
                <button class="close-btn" type="button" onclick="closeAttendancePasswordModal()" aria-label="Close password modal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="attendancePasswordError" class="error-msg" style="display:none;"></div>
            <form id="attendancePasswordForm" autocomplete="off" novalidate>
                <div class="form-group">
                    <label for="attendancePasswordInput">Please enter your password:</label>
                    <input type="password" class="form-control" id="attendancePasswordInput" autocomplete="off" />
                </div>
                <div style="display:flex; justify-content:flex-end; gap:10px;">
                    <button type="button" class="btn btn-secondary" id="attendancePasswordCancelBtn">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" id="attendancePasswordSubmitBtn">
                        Submit
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script>
        // ========== Utility & State ==========
        const ITEM_KEY = '@Model.ItemKey';
        const CAN_MARK_ATTENDANCE = @Model.CanMarkAttendance.ToString().ToLower();
        let subjectsData = [];
        let attendanceTypes = [];
        let upcomingClassesData = [];
        let lastBranchCode = null;
        const $loc = $('#js-localization');

        function getJsString(key) { return $loc.data(key) ?? key; }
        function escapeHtml(v) {
            if (v === null || v === undefined) return '';
            return String(v).replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
        }

        function isBranchAuthorized(branchCode) {
            if (branchCode == null) return false;
            try {
                const auth = JSON.parse(localStorage.getItem('authorizedBranches') || '{}');
                return !!auth[branchCode];
            } catch { return false; }
        }
        function setBranchAuthorized(branchCode) {
            if (branchCode == null) return;
            let auth = {};
            try { auth = JSON.parse(localStorage.getItem('authorizedBranches') || '{}'); } catch {}
            auth[branchCode] = true;
            localStorage.setItem('authorizedBranches', JSON.stringify(auth));
        }

        // ========== Labels ==========
        function setStudentLabels() {
            $('#todays-classes-title').text(getJsString('todays-classes'));
            $('#admin-view-label').text(getJsString('admin-view'));
            $('#viewing-todays-classes-only-admins-label').text(getJsString('viewing-todays-classes-only-admins'));
            $('#loading-todays-classes-label').text(getJsString('loading-todays-classes'));
            $('#enrolled-subjects-title').text(getJsString('enrolled-subjects'));
            $('#subjectSearch').attr('placeholder', getJsString('search-subjects'));
            $('#loading-subjects-label').text(getJsString('loading-subjects'));
            $('#modalTitle').text(getJsString('weekly-classes'));
            $('#status-label').text(getJsString('@(Model.IsActive ? "active-student" : "inactive-student")'));
            $('#student-label').text(getJsString('student'));
        }

        // ========== Data Loaders ==========
        async function loadAttendanceTypes() {
            try {
                const r = await fetch('/Student/GetAttendanceTypes');
                attendanceTypes = await r.json();
                if (!Array.isArray(attendanceTypes)) attendanceTypes = [];
            } catch { attendanceTypes = []; }
        }

        async function loadStudentSubjects() {
            try {
                const r = await fetch(`/Student/GetStudentSubjects/${ITEM_KEY}`);
                subjectsData = await r.json();
                renderSubjects(subjectsData);
            } catch {
                showError('subjectsGrid', 'failed-to-load-subjects');
            }
        }

        async function loadUpcomingClasses() {
            try {
                const r = await fetch(`/Student/GetUpcomingClasses/${ITEM_KEY}`);
                upcomingClassesData = await r.json();
                renderUpcomingClasses(upcomingClassesData);
            } catch {
                showError('upcomingClassesGrid', 'failed-to-load-classes');
            }
        }

        // ========== Rendering ==========
        function showError(containerId, key) {
            const container = document.getElementById(containerId);
            if (!container) return;
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>${getJsString('error')}</h4>
                    <p>${getJsString(key)}</p>
                </div>`;
        }

        function renderEmptyState(icon, titleKey, msgKey) {
            return `<div class="empty-state">
                <i class="fas ${icon}"></i>
                <h4>${getJsString(titleKey)}</h4>
                <p>${getJsString(msgKey)}</p>
            </div>`;
        }

        function renderSubjects(subjects) {
            const container = document.getElementById('subjectsGrid');
            if (!container) return;
            if (!subjects || subjects.length === 0) {
                container.innerHTML = renderEmptyState('fa-book-open', 'no-subjects-found', 'no-subjects-found-msg');
                return;
            }
            container.innerHTML = subjects.map(s => subjectCardHtml(s)).join('');
        }

        function subjectCardHtml(s) {
            return `
            <div class="subject-card">
                <div class="subject-header">
                    <div class="subject-icon">
                        <i class="fas fa-book"></i>
                    </div>
                    <h3 class="subject-name">${escapeHtml(s.subjectName)}</h3>
                </div>
                <div class="subject-details">
                    ${subjectDetail('fa-chalkboard-teacher', s.teacherName)}
                    ${subjectDetail('fa-phone', s.teacherPhone || getJsString('na'))}
                    ${subjectDetail('fa-building', s.branchName)}
                    ${subjectDetail('fa-graduation-cap', s.eduYearName)}
                    ${subjectDetail('fa-dollar-sign', s.studentFee ? s.studentFee + ' EGP' : getJsString('free'))}
                    ${subjectDetail(s.isOnline ? 'fa-laptop' : 'fa-school', s.isOnline ? getJsString('online') : getJsString('in-person'))}
                </div>
                ${s.scheduleDay ? scheduleInfoHtml(s) : ''}
                <div style="margin-top:1rem;">
                    <button class="view-weekly-btn"
                            data-weekly='${encodeURIComponent(JSON.stringify({
                                subjectCode: s.subjectCode,
                                teacherCode: s.teacherCode,
                                yearCode: s.yearCode,
                                subjectName: s.subjectName,
                                teacherName: s.teacherName
                            }))}'>
                        <i class="fas fa-calendar-week"></i>
                        ${getJsString('weekly-classes')}
                    </button>
                </div>
            </div>`;
        }

        function subjectDetail(icon, text) {
            return `<div class="subject-detail">
                <i class="fas ${icon}"></i><span>${escapeHtml(text)}</span>
            </div>`;
        }

        function scheduleInfoHtml(s) {
            return `
            <div class="schedule-info">
                <div class="schedule-day">
                    <i class="fas fa-calendar-day"></i>
                    ${escapeHtml(s.scheduleDay)}
                </div>
                ${(s.scheduleStartTime && s.scheduleEndTime) ? `
                <div class="schedule-time">
                    <i class="fas fa-clock"></i>
                    <span>${escapeHtml(s.scheduleStartTime)} - ${escapeHtml(s.scheduleEndTime)}</span>
                </div>` : ''}
                ${s.hallName ? `
                <div class="subject-detail" style="margin-top:0.5rem;">
                    <i class="fas fa-door-open"></i>
                    <span>${escapeHtml(s.hallName)}</span>
                </div>` : ''}
            </div>`;
        }

        function renderUpcomingClasses(classes) {
            const container = document.getElementById('upcomingClassesGrid');
            if (!container) return;
            if (!classes || classes.length === 0) {
                container.innerHTML = renderEmptyState('fa-clock', 'no-classes-available', 'no-classes-available-msg');
                return;
            }
            container.innerHTML = classes.map(c => classCardHtml(c)).join('');
        }

        function classCardHtml(c) {
            const scheduleWarning = (c.assignedScheduleCode != null) &&
                                    (c.scheduleCode == null || c.scheduleCode !== c.assignedScheduleCode);
            return `
            <div class="class-card ${!c.canAttend ? 'attended' : ''}"
                 data-class='${encodeURIComponent(JSON.stringify(c))}'>
                <div class="class-header">
                    <div class="class-icon">
                        <i class="fas fa-chalkboard-teacher"></i>
                    </div>
                    <div class="class-info">
                        ${scheduleWarning ? `<div class="class-warning">This class is not in your regular schedule.</div>` : ''}
                        <h3>${escapeHtml(c.className)}</h3>
                        <div class="class-subject">${escapeHtml(c.subjectName)}</div>
                    </div>
                </div>
                <div class="class-details">
                    ${classDetail('fa-user-tie', c.teacherName)}
                    ${classDetail('fa-building', c.branchName)}
                    ${classDetail('fa-door-open', c.hallName)}
                    ${classDetail('fa-dollar-sign', c.classPrice ? c.classPrice + ' EGP' : getJsString('free'))}
                </div>
                <div class="class-time">
                    <div class="time-info">
                        <div class="time-label">${getJsString('start-time')}</div>
                        <div class="time-value">${escapeHtml(c.startTime)}</div>
                    </div>
                    <div class="time-info">
                        <div class="time-label">${getJsString('end-time')}</div>
                        <div class="time-value">${escapeHtml(c.endTime)}</div>
                    </div>
                </div>
                ${renderAttendanceControls(c)}
            </div>`;
        }

        function classDetail(icon, text) {
            return `<div class="class-detail">
                <i class="fas ${icon}"></i><span>${escapeHtml(text)}</span>
            </div>`;
        }

        function getDiscountAttendanceType() {
            return attendanceTypes.find(t =>
                (t.text || '').toLowerCase().includes('discount') ||
                (t.text || '').includes('خصم')
            );
        }

        function renderAttendanceControls(c) {
            if (c.isAttended) {
                return `<div class="attended-badge">
                    <i class="fas fa-check"></i>
                    <span>${getJsString('already-attended')}</span>
                </div>`;
            }
            if (!isBranchAuthorized(c.branchCode)) return '';
            return `
            <div class="attendance-controls" data-attendance="${c.classCode}">
                <select class="attendance-type-select" id="attendanceType_${c.classCode}">
                    ${attendanceTypes.map(t => `<option value="${t.value}">${escapeHtml(t.text)}</option>`).join('')}
                </select>
                <input type="number" min="0" step="1" placeholder="Session price"
                       class="discount-price-input" id="discountPrice_${c.classCode}" style="display:none;" />
                <button class="attend-btn" data-attend-btn="${c.classCode}">
                    <i class="fas fa-check"></i>
                    <span>${getJsString('mark-attendance')}</span>
                </button>
            </div>`;
        }

        // ========== Weekly Classes ==========
        function openWeeklyModal(payload) {
            const modal = document.getElementById('weeklyModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalBody = document.getElementById('modalBody');
            if (!modal || !modalTitle || !modalBody) return;
            modalTitle.textContent = `${getJsString('weekly-classes')} - ${payload.subjectName} (${payload.teacherName})`;
            modalBody.innerHTML = `
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <span>${getJsString('loading-weekly-classes')}</span>
                </div>`;
            modal.classList.add('show');
            modal.setAttribute('aria-hidden', 'false');

            fetch(`/Student/GetWeeklyClasses/${ITEM_KEY}?subjectCode=${payload.subjectCode}&teacherCode=${payload.teacherCode}&yearCode=${payload.yearCode}`)
                .then(r => r.json())
                .then(data => {
                    if (data.error) {
                        modalBody.innerHTML = renderEmptyState('fa-exclamation-triangle', 'error', 'failed-to-load-classes');
                        return;
                    }
                    renderWeeklyClasses(data);
                })
                .catch(() => {
                    modalBody.innerHTML = renderEmptyState('fa-exclamation-triangle', 'error', 'failed-to-load-classes');
                });
        }

        function renderWeeklyClasses(list) {
            const modalBody = document.getElementById('modalBody');
            if (!modalBody) return;
            if (!list || !list.length) {
                modalBody.innerHTML = renderEmptyState('fa-calendar-times', 'no-classes-this-week', 'no-classes-this-week-msg');
                return;
            }
            modalBody.innerHTML = `
                <div class="upcoming-classes-grid">
                    ${list.map(c => weeklyClassCardHtml(c)).join('')}
                </div>`;
        }

        function weeklyClassCardHtml(c) {
            const warning = (c.assignedScheduleCode != null) &&
                            (c.scheduleCode == null || c.scheduleCode !== c.assignedScheduleCode);
            return `
            <div class="class-card ${c.isAttended ? 'attended' : ''}"
                 data-class='${encodeURIComponent(JSON.stringify(c))}'>
                <div class="class-header">
                    <div class="class-icon"><i class="fas fa-chalkboard-teacher"></i></div>
                    <div class="class-info">
                        <h3>${escapeHtml(c.className)}</h3>
                        <div class="class-subject">${escapeHtml(c.subjectName)}</div>
                    </div>
                </div>
                <div class="class-details">
                    ${classDetail('fa-calendar-day', `${escapeHtml(c.dayOfWeek)} - ${escapeHtml(c.classDate)}`)}
                    ${classDetail('fa-user-tie', c.teacherName)}
                    ${classDetail('fa-building', c.branchName)}
                    ${classDetail('fa-door-open', c.hallName)}
                </div>
                <div class="class-time">
                    <div class="time-info">
                        <div class="time-label">${getJsString('start-time')}</div>
                        <div class="time-value">${escapeHtml(c.startTime)}</div>
                    </div>
                    <div class="time-info">
                        <div class="time-label">${getJsString('end-time')}</div>
                        <div class="time-value">${escapeHtml(c.endTime)}</div>
                    </div>
                </div>
                ${warning ? `<div class="class-warning">This is not your class</div>` : ''}
                ${renderAttendanceControls(c)}
            </div>`;
        }

        // ========== Attendance Actions ==========
        async function submitAttendance(button, classCode, attendanceType, sessionPrice) {
            button.disabled = true;
            button.classList.add('attending');
            button.innerHTML = `<i class="fas fa-spinner fa-spin"></i><span>${getJsString('marking')}</span>`;
            try {
                const payload = { itemKey: ITEM_KEY, classCode: Number(classCode), attendanceType };
                if (sessionPrice != null) payload.sessionPrice = sessionPrice;
                const res = await fetch('/Student/MarkAttendance', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await res.json();
                if (result.success) {
                    alert(getJsString('attendance-marked-successfully'));
                    loadUpcomingClasses();
                } else {
                    alert(result.error || getJsString('failed-to-mark-attendance'));
                    resetAttendBtn(button);
                }
            } catch {
                alert(getJsString('attendance-error'));
                resetAttendBtn(button);
            }
        }

        function resetAttendBtn(button) {
            button.disabled = false;
            button.classList.remove('attending');
            button.innerHTML = `<i class="fas fa-check"></i><span>${getJsString('mark-attendance')}</span>`;
        }

        // ========== Modal Control ==========
        function openAttendancePasswordModal() {
            const modal = $('#attendancePasswordModal');
            $('#attendancePasswordInput').val('');
            $('#attendancePasswordError').hide();
            modal.addClass('show').attr('aria-hidden', 'false');
            setTimeout(() => $('#attendancePasswordInput').trigger('focus'), 50);
            console.log('[Modal] Attendance password modal opened');
        }

        function closeAttendancePasswordModal() {
            $('#attendancePasswordModal').removeClass('show').attr('aria-hidden', 'true');
            console.log('[Modal] Attendance password modal closed');
        }
        window.closeAttendancePasswordModal = closeAttendancePasswordModal;

        function closeWeeklyModal() {
            const m = document.getElementById('weeklyModal');
            if (m) {
                m.classList.remove('show');
                m.setAttribute('aria-hidden', 'true');
            }
        }
        window.closeWeeklyModal = closeWeeklyModal;

        // ========== Event Delegation ==========
                function setupDelegatedEvents() {
            document.addEventListener('click', e => {
                // Handle signup modal clicks FIRST - before all other handlers
                if (e.target.closest('#onlineSignupModal .signup-modal')) {
                    return; // Let the modal handle its own clicks
                }

                // Close signup modal only if clicking the backdrop
                if (e.target.id === 'onlineSignupModal') {
                    closeSignupModal();
                    return;
                }

                // 1. Weekly classes button
                const weeklyBtn = e.target.closest('.view-weekly-btn');
                if (weeklyBtn) {
                    const payloadStr = weeklyBtn.getAttribute('data-weekly');
                    let payload = null;
                    try { payload = JSON.parse(decodeURIComponent(payloadStr)); } catch { payload = null; }
                    if (payload) openWeeklyModal(payload);
                    return;
                }

                // 2. Attendance button BEFORE class-card handler
                const attendBtn = e.target.closest('[data-attend-btn]');
                if (attendBtn) {
                    e.stopPropagation();
                    const classCode = attendBtn.getAttribute('data-attend-btn');
                    const select = document.getElementById(`attendanceType_${classCode}`);
                    if (!select) return;
                    const discountType = getDiscountAttendanceType();
                    const discountValue = discountType ? Number(discountType.value) : null;
                    const discountInput = document.getElementById(`discountPrice_${classCode}`);
                    const attendanceType = parseInt(select.value);
                    let sessionPrice = null;
                    if (attendanceType === discountValue && discountInput && discountInput.value) {
                        sessionPrice = parseInt(discountInput.value);
                    }
                    submitAttendance(attendBtn, classCode, attendanceType, sessionPrice);
                    return;
                }

                // 3. If click is inside attendance controls (select/input) do not trigger card handler
                if (e.target.closest('.attendance-controls')) {
                    return;
                }

                // 4. Class card (authorization check)
                const classCard = e.target.closest('.class-card');
                if (classCard && classCard.hasAttribute('data-class')) {
                    let c = null;
                    try { c = JSON.parse(decodeURIComponent(classCard.getAttribute('data-class'))); } catch { c = null; }
                    if (c) {
                        lastBranchCode = c.branchCode;
                        if (!isBranchAuthorized(lastBranchCode)) {
                            openAttendancePasswordModal();
                        }
                    }
                    return;
                }

                // 5. Other modal overlays
                if (e.target.id === 'attendancePasswordModal') {
                    closeAttendancePasswordModal();
                    return;
                }
                if (e.target.id === 'weeklyModal') {
                    closeWeeklyModal();
                }
            });

            document.addEventListener('change', e => {
                const select = e.target.closest('.attendance-type-select');
                if (select) {
                    const classCode = select.id.split('_')[1];
                    const discountType = getDiscountAttendanceType();
                    const discountValue = discountType ? String(discountType.value) : null;
                    const input = document.getElementById(`discountPrice_${classCode}`);
                    if (input) {
                        if (select.value === discountValue) {
                            input.style.display = 'inline-block';
                        } else {
                            input.value = '';
                            input.style.display = 'none';
                        }
                    }
                }
            });

            document.addEventListener('keydown', e => {
                if (e.key === 'Escape') {
                    closeAttendancePasswordModal();
                    closeWeeklyModal();
                    closeSignupModal();
                }
            });
        }

        // ========== Attendance Password Form ==========
        function setupAttendancePasswordForm() {
            const form = document.getElementById('attendancePasswordForm');
            if (!form) return;
            const cancelBtn = document.getElementById('attendancePasswordCancelBtn');
            if (cancelBtn) cancelBtn.addEventListener('click', closeAttendancePasswordModal);

            form.addEventListener('submit', async function (e) {
                e.preventDefault();
                const passwordInput = document.getElementById('attendancePasswordInput');
                const errorBox = $('#attendancePasswordError');
                const submitBtn = $('#attendancePasswordSubmitBtn');

                const password = (passwordInput.value || '').trim();
                if (!password) {
                    errorBox.text('Required').show();
                    return;
                }
                if (lastBranchCode == null) {
                    errorBox.text('Invalid branch context').show();
                    return;
                }

                submitBtn.prop('disabled', true);
                errorBox.hide();
                try {
                    const res = await fetch('/Student/CheckAttendancePassword', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            Password: password,
                            BranchCode: lastBranchCode
                        })
                    });
                    const result = await res.json();
                    if (result.success) {
                        closeAttendancePasswordModal();
                        setBranchAuthorized(lastBranchCode);
                        renderUpcomingClasses(upcomingClassesData);
                    } else {
                        errorBox.text(result.error || 'Wrong password or not authorized.').show();
                        passwordInput.value = '';
                        passwordInput.focus();
                    }
                } catch {
                    errorBox.text(getJsString('attendance-error')).show();
                } finally {
                    submitBtn.prop('disabled', false);
                }
            });

            // Reinforced click -> always routes through submit handler
            const btn = document.getElementById('attendancePasswordSubmitBtn');
            if (btn) {
                btn.addEventListener('click', function (ev) {
                    if (form.requestSubmit) {
                        ev.preventDefault();
                        form.requestSubmit(btn);
                    }
                });
            }

            // Overlay detection (debug)
            setTimeout(() => {
                const rect = btn.getBoundingClientRect();
                const el = document.elementFromPoint(rect.left + rect.width / 2, rect.top + rect.height / 2);
                if (el !== btn) {
                    console.warn('[Attendance Modal] Another element overlays submit button:', el);
                }
            }, 200);
        }

        // ========== Search ==========
        function setupSearch() {
            const input = document.getElementById('subjectSearch');
            if (!input) return;
            input.addEventListener('input', e => {
                const term = e.target.value.toLowerCase();
                const filtered = subjectsData.filter(s =>
                    (s.subjectName || '').toLowerCase().includes(term) ||
                    (s.teacherName || '').toLowerCase().includes(term) ||
                    (s.branchName || '').toLowerCase().includes(term)
                );
                renderSubjects(filtered);
            });
        }

    

                // ========== Online Signup Feature ==========
        // Add this to your existing JavaScript in Profile.cshtml

        // Online Signup Variables
        let validatedPinCode = null;
        let usernameCheckTimeout = null;

        // Initialize signup functionality (add this to your existing DOMContentLoaded event)
        function initializeSignupFeature() {
            const setupBtn = document.getElementById('setupOnlineAccessBtn');
            if (setupBtn) {
                setupBtn.addEventListener('click', openSignupModal);
            }

            setupSignupEventListeners();
        }

        function setupSignupEventListeners() {
            // PIN validation form
            const pinForm = document.getElementById('pinValidationForm');
        if (pinForm) {
            pinForm.removeEventListener('submit', handlePinValidation);
            pinForm.addEventListener('submit', handlePinValidation);
        }
            // Account setup form
            const accountForm = document.getElementById('accountSetupForm');
            if (accountForm) {
                accountForm.addEventListener('submit', handleAccountSetup);
            }

            // Username availability check
            const usernameInput = document.getElementById('signupUsername');
            if (usernameInput) {
                usernameInput.addEventListener('input', debounceUsernameCheck);
            }

            // Password confirmation
            const passwordInput = document.getElementById('signupPassword');
            const confirmInput = document.getElementById('confirmPassword');
            if (passwordInput && confirmInput) {
                confirmInput.addEventListener('input', checkPasswordMatch);
                passwordInput.addEventListener('input', checkPasswordMatch);
            }
        }

        function debounceUsernameCheck(e) {
            clearTimeout(usernameCheckTimeout);
            usernameCheckTimeout = setTimeout(() => {
                checkUsernameAvailability();
            }, 500);
        }

        function openSignupModal() {
            const modal = document.getElementById('onlineSignupModal');
            if (modal) {
                modal.classList.add('show');
                modal.setAttribute('aria-hidden', 'false');

                // Reset to first step
                showSignupStep('pinStep');
                clearSignupForm();

                // Focus on PIN input
                setTimeout(() => {
                    const pinInput = document.getElementById('signupPinInput');
                    if (pinInput) pinInput.focus();
                }, 100);
            }
        }

        function closeSignupModal() {
            const modal = document.getElementById('onlineSignupModal');
            if (modal) {
                modal.classList.remove('show');
                modal.setAttribute('aria-hidden', 'true');
                clearSignupForm();
                validatedPinCode = null;
            }
        }
        window.closeSignupModal = closeSignupModal;

        function showSignupStep(stepId) {
            // Hide all steps
            document.querySelectorAll('.signup-step').forEach(step => {
                step.classList.remove('active');
            });

            // Show target step
            const targetStep = document.getElementById(stepId);
            if (targetStep) {
                targetStep.classList.add('active');
            }
        }

        function clearSignupForm() {
            // Clear all inputs
            const inputs = document.querySelectorAll('#onlineSignupModal input');
            inputs.forEach(input => input.value = '');

            // Clear error messages
            document.querySelectorAll('.error-msg').forEach(error => {
                error.style.display = 'none';
                error.textContent = '';
            });

            // Clear feedback messages
            document.querySelectorAll('.input-feedback').forEach(feedback => {
                feedback.textContent = '';
                feedback.className = 'input-feedback';
            });
        }

        async function handlePinValidation(e) {
            e.preventDefault();

            const pinInput = document.getElementById('signupPinInput');
            const errorDiv = document.getElementById('pinError');
            const submitBtn = document.getElementById('validatePinBtn');

            const pinCode = pinInput.value.trim();

            if (!pinCode) {
                showSignupError(errorDiv, 'Please enter your PIN code.');
                return;
            }

            // Show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Validating...';
            errorDiv.style.display = 'none';

            try {
                const response = await fetch('/Student/ValidateSignupPin', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ItemKey: ITEM_KEY,
                        PinCode: pinCode
                    })
                });

                const result = await response.json();

                if (result.success) {
                    validatedPinCode = pinCode;
                    showSignupStep('accountStep');

                    // Focus on username input
                    setTimeout(() => {
                        const usernameInput = document.getElementById('signupUsername');
                        if (usernameInput) usernameInput.focus();
                    }, 100);
                } else {
                    showSignupError(errorDiv, result.error || 'Invalid PIN code.');
                }
            } catch (error) {
                showSignupError(errorDiv, 'An error occurred while validating the PIN code.');
                console.error('PIN validation error:', error);
            } finally {
                // Reset button
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-check"></i> Validate PIN';
            }
        }

        async function handleAccountSetup(e) {
            e.preventDefault();

            const usernameInput = document.getElementById('signupUsername');
            const passwordInput = document.getElementById('signupPassword');
            const confirmInput = document.getElementById('confirmPassword');
            const errorDiv = document.getElementById('accountError');
            const submitBtn = document.getElementById('completeSignupBtn');

            const username = usernameInput.value.trim();
            const password = passwordInput.value;
            const confirmPassword = confirmInput.value;

            // Validate inputs
            if (!username) {
                showSignupError(errorDiv, 'Please enter a username.');
                return;
            }

            if (!password || password.length < 6) {
                showSignupError(errorDiv, 'Password must be at least 6 characters long.');
                return;
            }

            if (password !== confirmPassword) {
                showSignupError(errorDiv, 'Passwords do not match.');
                return;
            }

            // Show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating Account...';
            errorDiv.style.display = 'none';

            try {
                const response = await fetch('/Student/CompleteOnlineSignup', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ItemKey: ITEM_KEY,
                        Username: username,
                        Password: password,
                        PinCode: validatedPinCode
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showSignupStep('successStep');
                } else {
                    showSignupError(errorDiv, result.error || 'Failed to create account.');
                }
            } catch (error) {
                showSignupError(errorDiv, 'An error occurred while creating your account.');
                console.error('Account setup error:', error);
            } finally {
                // Reset button
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-user-plus"></i> Create Account';
            }
        }

        async function checkUsernameAvailability() {
            const usernameInput = document.getElementById('signupUsername');
            const feedback = document.getElementById('usernameCheck');

            const username = usernameInput.value.trim();

            if (!username || username.length < 3) {
                feedback.textContent = '';
                feedback.className = 'input-feedback';
                return;
            }

            feedback.textContent = 'Checking availability...';
            feedback.className = 'input-feedback';

            try {
                const response = await fetch(`/Student/CheckUsernameAvailability?username=${encodeURIComponent(username)}&itemKey=${ITEM_KEY}`);
                const result = await response.json();

                if (result.available) {
                    feedback.textContent = 'Username is available';
                    feedback.className = 'input-feedback success';
                } else {
                    feedback.textContent = 'Username is already taken';
                    feedback.className = 'input-feedback error';
                }
            } catch (error) {
                feedback.textContent = 'Error checking username';
                feedback.className = 'input-feedback error';
                console.error('Username check error:', error);
            }
        }

        function checkPasswordMatch() {
            const passwordInput = document.getElementById('signupPassword');
            const confirmInput = document.getElementById('confirmPassword');
            const feedback = document.getElementById('passwordMatch');

            const password = passwordInput.value;
            const confirmPassword = confirmInput.value;

            if (!confirmPassword) {
                feedback.textContent = '';
                feedback.className = 'input-feedback';
                return;
            }

            if (password === confirmPassword) {
                feedback.textContent = 'Passwords match';
                feedback.className = 'input-feedback success';
            } else {
                feedback.textContent = 'Passwords do not match';
                feedback.className = 'input-feedback error';
            }
        }

        function goBackToPinStep() {
            showSignupStep('pinStep');
        }
        window.goBackToPinStep = goBackToPinStep;

        function completeSignupProcess() {
            closeSignupModal();
            // Refresh the page to show the updated profile without the signup button
            window.location.reload();
        }
        window.completeSignupProcess = completeSignupProcess;

        function showSignupError(errorDiv, message) {
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
        }


        document.addEventListener('DOMContentLoaded', async function () {
            setStudentLabels();
            setupDelegatedEvents();
            setupAttendancePasswordForm();
            setupSearch();
            initializeSignupFeature(); // <- This was missing
            await loadAttendanceTypes();
            await Promise.all([loadUpcomingClasses(), loadStudentSubjects()]);
            console.log('[StudentProfile] Initialized');
        });
    </script>

    <div id="onlineSignupModal" class="modal-overlay" aria-hidden="true" role="dialog" aria-modal="true">
        <div class="modal-dialog signup-modal" role="document">
            <div class="modal-header">
                <h3 class="modal-title">Set Up Online Access</h3>
                <button class="close-btn" onclick="closeSignupModal()" aria-label="Close signup modal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <!-- Step 1: PIN Validation -->
                <div id="pinStep" class="signup-step active">
                    <div class="step-header">
                        <i class="fas fa-key"></i>
                        <h4>Enter Your PIN Code</h4>
                        <p>Please enter the PIN code provided by your institution to verify your eligibility for online access.</p>
                    </div>
                    <div id="pinError" class="error-msg" style="display:none;"></div>
                    <form id="pinValidationForm">
                        <div class="form-group">
                            <label for="signupPinInput">PIN Code:</label>
                            <input type="text" class="form-control" id="signupPinInput" placeholder="Enter your PIN code" maxlength="20" required />
                        </div>
                        <div class="form-actions">
                            <button type="button" class="btn btn-secondary" onclick="closeSignupModal()">Cancel</button>
                            <button type="submit" class="btn btn-primary" id="validatePinBtn">
                                <i class="fas fa-check"></i> Validate PIN
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Step 2: Account Setup -->
                <div id="accountStep" class="signup-step">
                    <div class="step-header">
                        <i class="fas fa-user-cog"></i>
                        <h4>Create Your Account</h4>
                        <p>Choose your username and password for online access.</p>
                    </div>
                    <div id="accountError" class="error-msg" style="display:none;"></div>
                    <form id="accountSetupForm">
                        <div class="form-group">
                            <label for="signupUsername">Username:</label>
                            <input type="text" class="form-control" id="signupUsername" placeholder="Choose a username" maxlength="50" required />
                            <div class="input-feedback" id="usernameCheck"></div>
                        </div>
                        <div class="form-group">
                            <label for="signupPassword">Password:</label>
                            <input type="password" class="form-control" id="signupPassword" placeholder="Choose a strong password" minlength="6" required />
                            <div class="password-requirements">
                                <small>Password must be at least 6 characters long</small>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="confirmPassword">Confirm Password:</label>
                            <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm your password" required />
                            <div class="input-feedback" id="passwordMatch"></div>
                        </div>
                        <div class="form-actions">
                            <button type="button" class="btn btn-secondary" onclick="goBackToPinStep()">
                                <i class="fas fa-arrow-left"></i> Back
                            </button>
                            <button type="submit" class="btn btn-primary" id="completeSignupBtn">
                                <i class="fas fa-user-plus"></i> Create Account
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Step 3: Success -->
                <div id="successStep" class="signup-step">
                    <div class="success-message">
                        <i class="fas fa-check-circle"></i>
                        <h4>Account Created Successfully!</h4>
                        <p>Your online access has been set up. You can now access digital content and participate in online classes.</p>
                        <button class="btn btn-primary" onclick="completeSignupProcess()">
                            <i class="fas fa-home"></i> Continue to Dashboard
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>

</html>